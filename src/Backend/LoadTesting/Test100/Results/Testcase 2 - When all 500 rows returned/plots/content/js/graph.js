/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 15.0, "minX": 0.0, "maxY": 10854.0, "series": [{"data": [[0.0, 15.0], [0.1, 15.0], [0.2, 15.0], [0.3, 15.0], [0.4, 15.0], [0.5, 15.0], [0.6, 15.0], [0.7, 15.0], [0.8, 15.0], [0.9, 15.0], [1.0, 15.0], [1.1, 15.0], [1.2, 15.0], [1.3, 15.0], [1.4, 15.0], [1.5, 15.0], [1.6, 15.0], [1.7, 15.0], [1.8, 15.0], [1.9, 15.0], [2.0, 18.0], [2.1, 18.0], [2.2, 18.0], [2.3, 18.0], [2.4, 18.0], [2.5, 18.0], [2.6, 18.0], [2.7, 18.0], [2.8, 18.0], [2.9, 18.0], [3.0, 19.0], [3.1, 19.0], [3.2, 19.0], [3.3, 19.0], [3.4, 19.0], [3.5, 19.0], [3.6, 19.0], [3.7, 19.0], [3.8, 19.0], [3.9, 19.0], [4.0, 19.0], [4.1, 19.0], [4.2, 19.0], [4.3, 19.0], [4.4, 19.0], [4.5, 19.0], [4.6, 19.0], [4.7, 19.0], [4.8, 19.0], [4.9, 19.0], [5.0, 20.0], [5.1, 20.0], [5.2, 20.0], [5.3, 20.0], [5.4, 20.0], [5.5, 20.0], [5.6, 20.0], [5.7, 20.0], [5.8, 20.0], [5.9, 20.0], [6.0, 21.0], [6.1, 21.0], [6.2, 21.0], [6.3, 21.0], [6.4, 21.0], [6.5, 21.0], [6.6, 21.0], [6.7, 21.0], [6.8, 21.0], [6.9, 21.0], [7.0, 21.0], [7.1, 21.0], [7.2, 21.0], [7.3, 21.0], [7.4, 21.0], [7.5, 21.0], [7.6, 21.0], [7.7, 21.0], [7.8, 21.0], [7.9, 21.0], [8.0, 22.0], [8.1, 22.0], [8.2, 22.0], [8.3, 22.0], [8.4, 22.0], [8.5, 22.0], [8.6, 22.0], [8.7, 22.0], [8.8, 22.0], [8.9, 22.0], [9.0, 23.0], [9.1, 23.0], [9.2, 23.0], [9.3, 23.0], [9.4, 23.0], [9.5, 23.0], [9.6, 23.0], [9.7, 23.0], [9.8, 23.0], [9.9, 23.0], [10.0, 23.0], [10.1, 23.0], [10.2, 23.0], [10.3, 23.0], [10.4, 23.0], [10.5, 23.0], [10.6, 23.0], [10.7, 23.0], [10.8, 23.0], [10.9, 23.0], [11.0, 23.0], [11.1, 23.0], [11.2, 23.0], [11.3, 23.0], [11.4, 23.0], [11.5, 23.0], [11.6, 23.0], [11.7, 23.0], [11.8, 23.0], [11.9, 23.0], [12.0, 23.0], [12.1, 23.0], [12.2, 23.0], [12.3, 23.0], [12.4, 23.0], [12.5, 23.0], [12.6, 23.0], [12.7, 23.0], [12.8, 23.0], [12.9, 23.0], [13.0, 24.0], [13.1, 24.0], [13.2, 24.0], [13.3, 24.0], [13.4, 24.0], [13.5, 24.0], [13.6, 24.0], [13.7, 24.0], [13.8, 24.0], [13.9, 24.0], [14.0, 24.0], [14.1, 24.0], [14.2, 24.0], [14.3, 24.0], [14.4, 24.0], [14.5, 24.0], [14.6, 24.0], [14.7, 24.0], [14.8, 24.0], [14.9, 24.0], [15.0, 24.0], [15.1, 24.0], [15.2, 24.0], [15.3, 24.0], [15.4, 24.0], [15.5, 24.0], [15.6, 24.0], [15.7, 24.0], [15.8, 24.0], [15.9, 24.0], [16.0, 25.0], [16.1, 25.0], [16.2, 25.0], [16.3, 25.0], [16.4, 25.0], [16.5, 25.0], [16.6, 25.0], [16.7, 25.0], [16.8, 25.0], [16.9, 25.0], [17.0, 26.0], [17.1, 26.0], [17.2, 26.0], [17.3, 26.0], [17.4, 26.0], [17.5, 26.0], [17.6, 26.0], [17.7, 26.0], [17.8, 26.0], [17.9, 26.0], [18.0, 26.0], [18.1, 26.0], [18.2, 26.0], [18.3, 26.0], [18.4, 26.0], [18.5, 26.0], [18.6, 26.0], [18.7, 26.0], [18.8, 26.0], [18.9, 26.0], [19.0, 27.0], [19.1, 27.0], [19.2, 27.0], [19.3, 27.0], [19.4, 27.0], [19.5, 27.0], [19.6, 27.0], [19.7, 27.0], [19.8, 27.0], [19.9, 27.0], [20.0, 28.0], [20.1, 28.0], [20.2, 28.0], [20.3, 28.0], [20.4, 28.0], [20.5, 28.0], [20.6, 28.0], [20.7, 28.0], [20.8, 28.0], [20.9, 28.0], [21.0, 28.0], [21.1, 28.0], [21.2, 28.0], [21.3, 28.0], [21.4, 28.0], [21.5, 28.0], [21.6, 28.0], [21.7, 28.0], [21.8, 28.0], [21.9, 28.0], [22.0, 29.0], [22.1, 29.0], [22.2, 29.0], [22.3, 29.0], [22.4, 29.0], [22.5, 29.0], [22.6, 29.0], [22.7, 29.0], [22.8, 29.0], [22.9, 29.0], [23.0, 30.0], [23.1, 30.0], [23.2, 30.0], [23.3, 30.0], [23.4, 30.0], [23.5, 30.0], [23.6, 30.0], [23.7, 30.0], [23.8, 30.0], [23.9, 30.0], [24.0, 30.0], [24.1, 30.0], [24.2, 30.0], [24.3, 30.0], [24.4, 30.0], [24.5, 30.0], [24.6, 30.0], [24.7, 30.0], [24.8, 30.0], [24.9, 30.0], [25.0, 31.0], [25.1, 31.0], [25.2, 31.0], [25.3, 31.0], [25.4, 31.0], [25.5, 31.0], [25.6, 31.0], [25.7, 31.0], [25.8, 31.0], [25.9, 31.0], [26.0, 32.0], [26.1, 32.0], [26.2, 32.0], [26.3, 32.0], [26.4, 32.0], [26.5, 32.0], [26.6, 32.0], [26.7, 32.0], [26.8, 32.0], [26.9, 32.0], [27.0, 32.0], [27.1, 32.0], [27.2, 32.0], [27.3, 32.0], [27.4, 32.0], [27.5, 32.0], [27.6, 32.0], [27.7, 32.0], [27.8, 32.0], [27.9, 32.0], [28.0, 34.0], [28.1, 34.0], [28.2, 34.0], [28.3, 34.0], [28.4, 34.0], [28.5, 34.0], [28.6, 34.0], [28.7, 34.0], [28.8, 34.0], [28.9, 34.0], [29.0, 34.0], [29.1, 34.0], [29.2, 34.0], [29.3, 34.0], [29.4, 34.0], [29.5, 34.0], [29.6, 34.0], [29.7, 34.0], [29.8, 34.0], [29.9, 34.0], [30.0, 35.0], [30.1, 35.0], [30.2, 35.0], [30.3, 35.0], [30.4, 35.0], [30.5, 35.0], [30.6, 35.0], [30.7, 35.0], [30.8, 35.0], [30.9, 35.0], [31.0, 35.0], [31.1, 35.0], [31.2, 35.0], [31.3, 35.0], [31.4, 35.0], [31.5, 35.0], [31.6, 35.0], [31.7, 35.0], [31.8, 35.0], [31.9, 35.0], [32.0, 36.0], [32.1, 36.0], [32.2, 36.0], [32.3, 36.0], [32.4, 36.0], [32.5, 36.0], [32.6, 36.0], [32.7, 36.0], [32.8, 36.0], [32.9, 36.0], [33.0, 37.0], [33.1, 37.0], [33.2, 37.0], [33.3, 37.0], [33.4, 37.0], [33.5, 37.0], [33.6, 37.0], [33.7, 37.0], [33.8, 37.0], [33.9, 37.0], [34.0, 38.0], [34.1, 38.0], [34.2, 38.0], [34.3, 38.0], [34.4, 38.0], [34.5, 38.0], [34.6, 38.0], [34.7, 38.0], [34.8, 38.0], [34.9, 38.0], [35.0, 39.0], [35.1, 39.0], [35.2, 39.0], [35.3, 39.0], [35.4, 39.0], [35.5, 39.0], [35.6, 39.0], [35.7, 39.0], [35.8, 39.0], [35.9, 39.0], [36.0, 39.0], [36.1, 39.0], [36.2, 39.0], [36.3, 39.0], [36.4, 39.0], [36.5, 39.0], [36.6, 39.0], [36.7, 39.0], [36.8, 39.0], [36.9, 39.0], [37.0, 39.0], [37.1, 39.0], [37.2, 39.0], [37.3, 39.0], [37.4, 39.0], [37.5, 39.0], [37.6, 39.0], [37.7, 39.0], [37.8, 39.0], [37.9, 39.0], [38.0, 39.0], [38.1, 39.0], [38.2, 39.0], [38.3, 39.0], [38.4, 39.0], [38.5, 39.0], [38.6, 39.0], [38.7, 39.0], [38.8, 39.0], [38.9, 39.0], [39.0, 40.0], [39.1, 40.0], [39.2, 40.0], [39.3, 40.0], [39.4, 40.0], [39.5, 40.0], [39.6, 40.0], [39.7, 40.0], [39.8, 40.0], [39.9, 40.0], [40.0, 40.0], [40.1, 40.0], [40.2, 40.0], [40.3, 40.0], [40.4, 40.0], [40.5, 40.0], [40.6, 40.0], [40.7, 40.0], [40.8, 40.0], [40.9, 40.0], [41.0, 41.0], [41.1, 41.0], [41.2, 41.0], [41.3, 41.0], [41.4, 41.0], [41.5, 41.0], [41.6, 41.0], [41.7, 41.0], [41.8, 41.0], [41.9, 41.0], [42.0, 41.0], [42.1, 41.0], [42.2, 41.0], [42.3, 41.0], [42.4, 41.0], [42.5, 41.0], [42.6, 41.0], [42.7, 41.0], [42.8, 41.0], [42.9, 41.0], [43.0, 42.0], [43.1, 42.0], [43.2, 42.0], [43.3, 42.0], [43.4, 42.0], [43.5, 42.0], [43.6, 42.0], [43.7, 42.0], [43.8, 42.0], [43.9, 42.0], [44.0, 42.0], [44.1, 42.0], [44.2, 42.0], [44.3, 42.0], [44.4, 42.0], [44.5, 42.0], [44.6, 42.0], [44.7, 42.0], [44.8, 42.0], [44.9, 42.0], [45.0, 43.0], [45.1, 43.0], [45.2, 43.0], [45.3, 43.0], [45.4, 43.0], [45.5, 43.0], [45.6, 43.0], [45.7, 43.0], [45.8, 43.0], [45.9, 43.0], [46.0, 43.0], [46.1, 43.0], [46.2, 43.0], [46.3, 43.0], [46.4, 43.0], [46.5, 43.0], [46.6, 43.0], [46.7, 43.0], [46.8, 43.0], [46.9, 43.0], [47.0, 44.0], [47.1, 44.0], [47.2, 44.0], [47.3, 44.0], [47.4, 44.0], [47.5, 44.0], [47.6, 44.0], [47.7, 44.0], [47.8, 44.0], [47.9, 44.0], [48.0, 44.0], [48.1, 44.0], [48.2, 44.0], [48.3, 44.0], [48.4, 44.0], [48.5, 44.0], [48.6, 44.0], [48.7, 44.0], [48.8, 44.0], [48.9, 44.0], [49.0, 44.0], [49.1, 44.0], [49.2, 44.0], [49.3, 44.0], [49.4, 44.0], [49.5, 44.0], [49.6, 44.0], [49.7, 44.0], [49.8, 44.0], [49.9, 44.0], [50.0, 45.0], [50.1, 45.0], [50.2, 45.0], [50.3, 45.0], [50.4, 45.0], [50.5, 45.0], [50.6, 45.0], [50.7, 45.0], [50.8, 45.0], [50.9, 45.0], [51.0, 46.0], [51.1, 46.0], [51.2, 46.0], [51.3, 46.0], [51.4, 46.0], [51.5, 46.0], [51.6, 46.0], [51.7, 46.0], [51.8, 46.0], [51.9, 46.0], [52.0, 48.0], [52.1, 48.0], [52.2, 48.0], [52.3, 48.0], [52.4, 48.0], [52.5, 48.0], [52.6, 48.0], [52.7, 48.0], [52.8, 48.0], [52.9, 48.0], [53.0, 48.0], [53.1, 48.0], [53.2, 48.0], [53.3, 48.0], [53.4, 48.0], [53.5, 48.0], [53.6, 48.0], [53.7, 48.0], [53.8, 48.0], [53.9, 48.0], [54.0, 48.0], [54.1, 48.0], [54.2, 48.0], [54.3, 48.0], [54.4, 48.0], [54.5, 48.0], [54.6, 48.0], [54.7, 48.0], [54.8, 48.0], [54.9, 48.0], [55.0, 48.0], [55.1, 48.0], [55.2, 48.0], [55.3, 48.0], [55.4, 48.0], [55.5, 48.0], [55.6, 48.0], [55.7, 48.0], [55.8, 48.0], [55.9, 48.0], [56.0, 51.0], [56.1, 51.0], [56.2, 51.0], [56.3, 51.0], [56.4, 51.0], [56.5, 51.0], [56.6, 51.0], [56.7, 51.0], [56.8, 51.0], [56.9, 51.0], [57.0, 52.0], [57.1, 52.0], [57.2, 52.0], [57.3, 52.0], [57.4, 52.0], [57.5, 52.0], [57.6, 52.0], [57.7, 52.0], [57.8, 52.0], [57.9, 52.0], [58.0, 52.0], [58.1, 52.0], [58.2, 52.0], [58.3, 52.0], [58.4, 52.0], [58.5, 52.0], [58.6, 52.0], [58.7, 52.0], [58.8, 52.0], [58.9, 52.0], [59.0, 52.0], [59.1, 52.0], [59.2, 52.0], [59.3, 52.0], [59.4, 52.0], [59.5, 52.0], [59.6, 52.0], [59.7, 52.0], [59.8, 52.0], [59.9, 52.0], [60.0, 54.0], [60.1, 54.0], [60.2, 54.0], [60.3, 54.0], [60.4, 54.0], [60.5, 54.0], [60.6, 54.0], [60.7, 54.0], [60.8, 54.0], [60.9, 54.0], [61.0, 55.0], [61.1, 55.0], [61.2, 55.0], [61.3, 55.0], [61.4, 55.0], [61.5, 55.0], [61.6, 55.0], [61.7, 55.0], [61.8, 55.0], [61.9, 55.0], [62.0, 55.0], [62.1, 55.0], [62.2, 55.0], [62.3, 55.0], [62.4, 55.0], [62.5, 55.0], [62.6, 55.0], [62.7, 55.0], [62.8, 55.0], [62.9, 55.0], [63.0, 55.0], [63.1, 55.0], [63.2, 55.0], [63.3, 55.0], [63.4, 55.0], [63.5, 55.0], [63.6, 55.0], [63.7, 55.0], [63.8, 55.0], [63.9, 55.0], [64.0, 56.0], [64.1, 56.0], [64.2, 56.0], [64.3, 56.0], [64.4, 56.0], [64.5, 56.0], [64.6, 56.0], [64.7, 56.0], [64.8, 56.0], [64.9, 56.0], [65.0, 57.0], [65.1, 57.0], [65.2, 57.0], [65.3, 57.0], [65.4, 57.0], [65.5, 57.0], [65.6, 57.0], [65.7, 57.0], [65.8, 57.0], [65.9, 57.0], [66.0, 58.0], [66.1, 58.0], [66.2, 58.0], [66.3, 58.0], [66.4, 58.0], [66.5, 58.0], [66.6, 58.0], [66.7, 58.0], [66.8, 58.0], [66.9, 58.0], [67.0, 61.0], [67.1, 61.0], [67.2, 61.0], [67.3, 61.0], [67.4, 61.0], [67.5, 61.0], [67.6, 61.0], [67.7, 61.0], [67.8, 61.0], [67.9, 61.0], [68.0, 62.0], [68.1, 62.0], [68.2, 62.0], [68.3, 62.0], [68.4, 62.0], [68.5, 62.0], [68.6, 62.0], [68.7, 62.0], [68.8, 62.0], [68.9, 62.0], [69.0, 62.0], [69.1, 62.0], [69.2, 62.0], [69.3, 62.0], [69.4, 62.0], [69.5, 62.0], [69.6, 62.0], [69.7, 62.0], [69.8, 62.0], [69.9, 62.0], [70.0, 65.0], [70.1, 65.0], [70.2, 65.0], [70.3, 65.0], [70.4, 65.0], [70.5, 65.0], [70.6, 65.0], [70.7, 65.0], [70.8, 65.0], [70.9, 65.0], [71.0, 65.0], [71.1, 65.0], [71.2, 65.0], [71.3, 65.0], [71.4, 65.0], [71.5, 65.0], [71.6, 65.0], [71.7, 65.0], [71.8, 65.0], [71.9, 65.0], [72.0, 66.0], [72.1, 66.0], [72.2, 66.0], [72.3, 66.0], [72.4, 66.0], [72.5, 66.0], [72.6, 66.0], [72.7, 66.0], [72.8, 66.0], [72.9, 66.0], [73.0, 67.0], [73.1, 67.0], [73.2, 67.0], [73.3, 67.0], [73.4, 67.0], [73.5, 67.0], [73.6, 67.0], [73.7, 67.0], [73.8, 67.0], [73.9, 67.0], [74.0, 67.0], [74.1, 67.0], [74.2, 67.0], [74.3, 67.0], [74.4, 67.0], [74.5, 67.0], [74.6, 67.0], [74.7, 67.0], [74.8, 67.0], [74.9, 67.0], [75.0, 70.0], [75.1, 70.0], [75.2, 70.0], [75.3, 70.0], [75.4, 70.0], [75.5, 70.0], [75.6, 70.0], [75.7, 70.0], [75.8, 70.0], [75.9, 70.0], [76.0, 71.0], [76.1, 71.0], [76.2, 71.0], [76.3, 71.0], [76.4, 71.0], [76.5, 71.0], [76.6, 71.0], [76.7, 71.0], [76.8, 71.0], [76.9, 71.0], [77.0, 73.0], [77.1, 73.0], [77.2, 73.0], [77.3, 73.0], [77.4, 73.0], [77.5, 73.0], [77.6, 73.0], [77.7, 73.0], [77.8, 73.0], [77.9, 73.0], [78.0, 74.0], [78.1, 74.0], [78.2, 74.0], [78.3, 74.0], [78.4, 74.0], [78.5, 74.0], [78.6, 74.0], [78.7, 74.0], [78.8, 74.0], [78.9, 74.0], [79.0, 77.0], [79.1, 77.0], [79.2, 77.0], [79.3, 77.0], [79.4, 77.0], [79.5, 77.0], [79.6, 77.0], [79.7, 77.0], [79.8, 77.0], [79.9, 77.0], [80.0, 82.0], [80.1, 82.0], [80.2, 82.0], [80.3, 82.0], [80.4, 82.0], [80.5, 82.0], [80.6, 82.0], [80.7, 82.0], [80.8, 82.0], [80.9, 82.0], [81.0, 83.0], [81.1, 83.0], [81.2, 83.0], [81.3, 83.0], [81.4, 83.0], [81.5, 83.0], [81.6, 83.0], [81.7, 83.0], [81.8, 83.0], [81.9, 83.0], [82.0, 91.0], [82.1, 91.0], [82.2, 91.0], [82.3, 91.0], [82.4, 91.0], [82.5, 91.0], [82.6, 91.0], [82.7, 91.0], [82.8, 91.0], [82.9, 91.0], [83.0, 119.0], [83.1, 119.0], [83.2, 119.0], [83.3, 119.0], [83.4, 119.0], [83.5, 119.0], [83.6, 119.0], [83.7, 119.0], [83.8, 119.0], [83.9, 119.0], [84.0, 167.0], [84.1, 167.0], [84.2, 167.0], [84.3, 167.0], [84.4, 167.0], [84.5, 167.0], [84.6, 167.0], [84.7, 167.0], [84.8, 167.0], [84.9, 167.0], [85.0, 332.0], [85.1, 332.0], [85.2, 332.0], [85.3, 332.0], [85.4, 332.0], [85.5, 332.0], [85.6, 332.0], [85.7, 332.0], [85.8, 332.0], [85.9, 332.0], [86.0, 551.0], [86.1, 551.0], [86.2, 551.0], [86.3, 551.0], [86.4, 551.0], [86.5, 551.0], [86.6, 551.0], [86.7, 551.0], [86.8, 551.0], [86.9, 551.0], [87.0, 975.0], [87.1, 975.0], [87.2, 975.0], [87.3, 975.0], [87.4, 975.0], [87.5, 975.0], [87.6, 975.0], [87.7, 975.0], [87.8, 975.0], [87.9, 975.0], [88.0, 1954.0], [88.1, 1954.0], [88.2, 1954.0], [88.3, 1954.0], [88.4, 1954.0], [88.5, 1954.0], [88.6, 1954.0], [88.7, 1954.0], [88.8, 1954.0], [88.9, 1954.0], [89.0, 1996.0], [89.1, 1996.0], [89.2, 1996.0], [89.3, 1996.0], [89.4, 1996.0], [89.5, 1996.0], [89.6, 1996.0], [89.7, 1996.0], [89.8, 1996.0], [89.9, 1996.0], [90.0, 2059.0], [90.1, 2059.0], [90.2, 2059.0], [90.3, 2059.0], [90.4, 2059.0], [90.5, 2059.0], [90.6, 2059.0], [90.7, 2059.0], [90.8, 2059.0], [90.9, 2059.0], [91.0, 2116.0], [91.1, 2116.0], [91.2, 2116.0], [91.3, 2116.0], [91.4, 2116.0], [91.5, 2116.0], [91.6, 2116.0], [91.7, 2116.0], [91.8, 2116.0], [91.9, 2116.0], [92.0, 2157.0], [92.1, 2157.0], [92.2, 2157.0], [92.3, 2157.0], [92.4, 2157.0], [92.5, 2157.0], [92.6, 2157.0], [92.7, 2157.0], [92.8, 2157.0], [92.9, 2157.0], [93.0, 2192.0], [93.1, 2192.0], [93.2, 2192.0], [93.3, 2192.0], [93.4, 2192.0], [93.5, 2192.0], [93.6, 2192.0], [93.7, 2192.0], [93.8, 2192.0], [93.9, 2192.0], [94.0, 2245.0], [94.1, 2245.0], [94.2, 2245.0], [94.3, 2245.0], [94.4, 2245.0], [94.5, 2245.0], [94.6, 2245.0], [94.7, 2245.0], [94.8, 2245.0], [94.9, 2245.0], [95.0, 2277.0], [95.1, 2277.0], [95.2, 2277.0], [95.3, 2277.0], [95.4, 2277.0], [95.5, 2277.0], [95.6, 2277.0], [95.7, 2277.0], [95.8, 2277.0], [95.9, 2277.0], [96.0, 2394.0], [96.1, 2394.0], [96.2, 2394.0], [96.3, 2394.0], [96.4, 2394.0], [96.5, 2394.0], [96.6, 2394.0], [96.7, 2394.0], [96.8, 2394.0], [96.9, 2394.0], [97.0, 2443.0], [97.1, 2443.0], [97.2, 2443.0], [97.3, 2443.0], [97.4, 2443.0], [97.5, 2443.0], [97.6, 2443.0], [97.7, 2443.0], [97.8, 2443.0], [97.9, 2443.0], [98.0, 2484.0], [98.1, 2484.0], [98.2, 2484.0], [98.3, 2484.0], [98.4, 2484.0], [98.5, 2484.0], [98.6, 2484.0], [98.7, 2484.0], [98.8, 2484.0], [98.9, 2484.0], [99.0, 2520.0], [99.1, 2520.0], [99.2, 2520.0], [99.3, 2520.0], [99.4, 2520.0], [99.5, 2520.0], [99.6, 2520.0], [99.7, 2520.0], [99.8, 2520.0], [99.9, 2520.0]], "isOverall": false, "label": "Step1. Login", "isController": false}, {"data": [[0.0, 16.0], [0.1, 23.0], [0.2, 27.0], [0.3, 30.0], [0.4, 36.0], [0.5, 45.0], [0.6, 51.0], [0.7, 56.0], [0.8, 61.0], [0.9, 64.0], [1.0, 67.0], [1.1, 70.0], [1.2, 76.0], [1.3, 81.0], [1.4, 85.0], [1.5, 89.0], [1.6, 93.0], [1.7, 96.0], [1.8, 102.0], [1.9, 108.0], [2.0, 112.0], [2.1, 115.0], [2.2, 119.0], [2.3, 125.0], [2.4, 132.0], [2.5, 137.0], [2.6, 141.0], [2.7, 144.0], [2.8, 147.0], [2.9, 150.0], [3.0, 153.0], [3.1, 154.0], [3.2, 155.0], [3.3, 155.0], [3.4, 156.0], [3.5, 157.0], [3.6, 158.0], [3.7, 160.0], [3.8, 162.0], [3.9, 166.0], [4.0, 168.0], [4.1, 172.0], [4.2, 175.0], [4.3, 179.0], [4.4, 185.0], [4.5, 189.0], [4.6, 196.0], [4.7, 198.0], [4.8, 203.0], [4.9, 207.0], [5.0, 212.0], [5.1, 215.0], [5.2, 219.0], [5.3, 223.0], [5.4, 230.0], [5.5, 236.0], [5.6, 239.0], [5.7, 244.0], [5.8, 247.0], [5.9, 252.0], [6.0, 254.0], [6.1, 257.0], [6.2, 259.0], [6.3, 263.0], [6.4, 266.0], [6.5, 268.0], [6.6, 270.0], [6.7, 272.0], [6.8, 276.0], [6.9, 280.0], [7.0, 284.0], [7.1, 289.0], [7.2, 292.0], [7.3, 294.0], [7.4, 297.0], [7.5, 299.0], [7.6, 303.0], [7.7, 307.0], [7.8, 310.0], [7.9, 312.0], [8.0, 316.0], [8.1, 319.0], [8.2, 323.0], [8.3, 326.0], [8.4, 329.0], [8.5, 331.0], [8.6, 334.0], [8.7, 336.0], [8.8, 338.0], [8.9, 340.0], [9.0, 342.0], [9.1, 347.0], [9.2, 349.0], [9.3, 351.0], [9.4, 353.0], [9.5, 356.0], [9.6, 357.0], [9.7, 362.0], [9.8, 364.0], [9.9, 367.0], [10.0, 368.0], [10.1, 370.0], [10.2, 373.0], [10.3, 375.0], [10.4, 378.0], [10.5, 380.0], [10.6, 383.0], [10.7, 387.0], [10.8, 390.0], [10.9, 393.0], [11.0, 394.0], [11.1, 395.0], [11.2, 397.0], [11.3, 400.0], [11.4, 403.0], [11.5, 406.0], [11.6, 408.0], [11.7, 411.0], [11.8, 412.0], [11.9, 415.0], [12.0, 416.0], [12.1, 419.0], [12.2, 421.0], [12.3, 424.0], [12.4, 426.0], [12.5, 429.0], [12.6, 431.0], [12.7, 434.0], [12.8, 436.0], [12.9, 438.0], [13.0, 440.0], [13.1, 443.0], [13.2, 445.0], [13.3, 448.0], [13.4, 450.0], [13.5, 452.0], [13.6, 455.0], [13.7, 457.0], [13.8, 459.0], [13.9, 460.0], [14.0, 463.0], [14.1, 465.0], [14.2, 468.0], [14.3, 470.0], [14.4, 474.0], [14.5, 476.0], [14.6, 479.0], [14.7, 483.0], [14.8, 485.0], [14.9, 489.0], [15.0, 492.0], [15.1, 494.0], [15.2, 496.0], [15.3, 499.0], [15.4, 501.0], [15.5, 504.0], [15.6, 507.0], [15.7, 509.0], [15.8, 511.0], [15.9, 513.0], [16.0, 516.0], [16.1, 518.0], [16.2, 522.0], [16.3, 524.0], [16.4, 525.0], [16.5, 527.0], [16.6, 528.0], [16.7, 531.0], [16.8, 533.0], [16.9, 536.0], [17.0, 538.0], [17.1, 540.0], [17.2, 542.0], [17.3, 545.0], [17.4, 547.0], [17.5, 549.0], [17.6, 552.0], [17.7, 554.0], [17.8, 556.0], [17.9, 558.0], [18.0, 559.0], [18.1, 561.0], [18.2, 564.0], [18.3, 566.0], [18.4, 570.0], [18.5, 571.0], [18.6, 574.0], [18.7, 577.0], [18.8, 578.0], [18.9, 581.0], [19.0, 583.0], [19.1, 585.0], [19.2, 586.0], [19.3, 588.0], [19.4, 589.0], [19.5, 591.0], [19.6, 593.0], [19.7, 595.0], [19.8, 596.0], [19.9, 598.0], [20.0, 600.0], [20.1, 602.0], [20.2, 603.0], [20.3, 605.0], [20.4, 606.0], [20.5, 607.0], [20.6, 609.0], [20.7, 610.0], [20.8, 612.0], [20.9, 613.0], [21.0, 614.0], [21.1, 615.0], [21.2, 616.0], [21.3, 617.0], [21.4, 618.0], [21.5, 620.0], [21.6, 621.0], [21.7, 622.0], [21.8, 624.0], [21.9, 626.0], [22.0, 627.0], [22.1, 628.0], [22.2, 629.0], [22.3, 630.0], [22.4, 631.0], [22.5, 633.0], [22.6, 634.0], [22.7, 635.0], [22.8, 636.0], [22.9, 638.0], [23.0, 639.0], [23.1, 641.0], [23.2, 641.0], [23.3, 642.0], [23.4, 644.0], [23.5, 644.0], [23.6, 645.0], [23.7, 646.0], [23.8, 647.0], [23.9, 649.0], [24.0, 650.0], [24.1, 651.0], [24.2, 653.0], [24.3, 653.0], [24.4, 655.0], [24.5, 656.0], [24.6, 657.0], [24.7, 658.0], [24.8, 660.0], [24.9, 660.0], [25.0, 662.0], [25.1, 663.0], [25.2, 664.0], [25.3, 665.0], [25.4, 666.0], [25.5, 667.0], [25.6, 668.0], [25.7, 669.0], [25.8, 670.0], [25.9, 672.0], [26.0, 673.0], [26.1, 674.0], [26.2, 676.0], [26.3, 677.0], [26.4, 679.0], [26.5, 679.0], [26.6, 681.0], [26.7, 681.0], [26.8, 682.0], [26.9, 684.0], [27.0, 684.0], [27.1, 685.0], [27.2, 687.0], [27.3, 687.0], [27.4, 689.0], [27.5, 691.0], [27.6, 692.0], [27.7, 693.0], [27.8, 694.0], [27.9, 695.0], [28.0, 696.0], [28.1, 697.0], [28.2, 699.0], [28.3, 699.0], [28.4, 700.0], [28.5, 701.0], [28.6, 702.0], [28.7, 703.0], [28.8, 704.0], [28.9, 705.0], [29.0, 706.0], [29.1, 707.0], [29.2, 708.0], [29.3, 709.0], [29.4, 710.0], [29.5, 711.0], [29.6, 712.0], [29.7, 713.0], [29.8, 714.0], [29.9, 715.0], [30.0, 716.0], [30.1, 717.0], [30.2, 718.0], [30.3, 718.0], [30.4, 719.0], [30.5, 720.0], [30.6, 721.0], [30.7, 722.0], [30.8, 723.0], [30.9, 724.0], [31.0, 725.0], [31.1, 726.0], [31.2, 726.0], [31.3, 728.0], [31.4, 728.0], [31.5, 729.0], [31.6, 729.0], [31.7, 730.0], [31.8, 731.0], [31.9, 731.0], [32.0, 732.0], [32.1, 733.0], [32.2, 734.0], [32.3, 734.0], [32.4, 735.0], [32.5, 735.0], [32.6, 736.0], [32.7, 736.0], [32.8, 737.0], [32.9, 737.0], [33.0, 738.0], [33.1, 738.0], [33.2, 739.0], [33.3, 740.0], [33.4, 740.0], [33.5, 741.0], [33.6, 742.0], [33.7, 742.0], [33.8, 743.0], [33.9, 743.0], [34.0, 744.0], [34.1, 745.0], [34.2, 745.0], [34.3, 746.0], [34.4, 746.0], [34.5, 747.0], [34.6, 748.0], [34.7, 749.0], [34.8, 749.0], [34.9, 750.0], [35.0, 751.0], [35.1, 752.0], [35.2, 752.0], [35.3, 753.0], [35.4, 754.0], [35.5, 754.0], [35.6, 755.0], [35.7, 755.0], [35.8, 756.0], [35.9, 757.0], [36.0, 757.0], [36.1, 758.0], [36.2, 759.0], [36.3, 759.0], [36.4, 760.0], [36.5, 761.0], [36.6, 761.0], [36.7, 762.0], [36.8, 763.0], [36.9, 763.0], [37.0, 763.0], [37.1, 764.0], [37.2, 764.0], [37.3, 765.0], [37.4, 766.0], [37.5, 767.0], [37.6, 768.0], [37.7, 769.0], [37.8, 770.0], [37.9, 770.0], [38.0, 771.0], [38.1, 772.0], [38.2, 773.0], [38.3, 773.0], [38.4, 774.0], [38.5, 774.0], [38.6, 775.0], [38.7, 776.0], [38.8, 776.0], [38.9, 777.0], [39.0, 777.0], [39.1, 778.0], [39.2, 779.0], [39.3, 780.0], [39.4, 780.0], [39.5, 781.0], [39.6, 782.0], [39.7, 783.0], [39.8, 783.0], [39.9, 784.0], [40.0, 785.0], [40.1, 785.0], [40.2, 786.0], [40.3, 787.0], [40.4, 787.0], [40.5, 788.0], [40.6, 789.0], [40.7, 790.0], [40.8, 790.0], [40.9, 791.0], [41.0, 791.0], [41.1, 792.0], [41.2, 792.0], [41.3, 793.0], [41.4, 794.0], [41.5, 795.0], [41.6, 796.0], [41.7, 797.0], [41.8, 797.0], [41.9, 798.0], [42.0, 799.0], [42.1, 800.0], [42.2, 801.0], [42.3, 802.0], [42.4, 802.0], [42.5, 803.0], [42.6, 804.0], [42.7, 805.0], [42.8, 805.0], [42.9, 806.0], [43.0, 807.0], [43.1, 808.0], [43.2, 808.0], [43.3, 809.0], [43.4, 809.0], [43.5, 811.0], [43.6, 811.0], [43.7, 812.0], [43.8, 813.0], [43.9, 814.0], [44.0, 815.0], [44.1, 815.0], [44.2, 816.0], [44.3, 817.0], [44.4, 818.0], [44.5, 818.0], [44.6, 819.0], [44.7, 819.0], [44.8, 820.0], [44.9, 820.0], [45.0, 821.0], [45.1, 822.0], [45.2, 822.0], [45.3, 823.0], [45.4, 824.0], [45.5, 825.0], [45.6, 826.0], [45.7, 827.0], [45.8, 827.0], [45.9, 828.0], [46.0, 828.0], [46.1, 829.0], [46.2, 829.0], [46.3, 830.0], [46.4, 830.0], [46.5, 831.0], [46.6, 832.0], [46.7, 832.0], [46.8, 832.0], [46.9, 833.0], [47.0, 833.0], [47.1, 834.0], [47.2, 834.0], [47.3, 835.0], [47.4, 836.0], [47.5, 836.0], [47.6, 837.0], [47.7, 838.0], [47.8, 838.0], [47.9, 838.0], [48.0, 839.0], [48.1, 840.0], [48.2, 840.0], [48.3, 841.0], [48.4, 841.0], [48.5, 842.0], [48.6, 842.0], [48.7, 843.0], [48.8, 844.0], [48.9, 844.0], [49.0, 844.0], [49.1, 845.0], [49.2, 845.0], [49.3, 846.0], [49.4, 846.0], [49.5, 847.0], [49.6, 847.0], [49.7, 847.0], [49.8, 848.0], [49.9, 848.0], [50.0, 849.0], [50.1, 849.0], [50.2, 850.0], [50.3, 851.0], [50.4, 851.0], [50.5, 852.0], [50.6, 852.0], [50.7, 853.0], [50.8, 853.0], [50.9, 854.0], [51.0, 854.0], [51.1, 854.0], [51.2, 855.0], [51.3, 855.0], [51.4, 856.0], [51.5, 856.0], [51.6, 857.0], [51.7, 857.0], [51.8, 857.0], [51.9, 858.0], [52.0, 859.0], [52.1, 859.0], [52.2, 860.0], [52.3, 860.0], [52.4, 861.0], [52.5, 861.0], [52.6, 862.0], [52.7, 862.0], [52.8, 863.0], [52.9, 864.0], [53.0, 864.0], [53.1, 865.0], [53.2, 865.0], [53.3, 866.0], [53.4, 866.0], [53.5, 867.0], [53.6, 868.0], [53.7, 868.0], [53.8, 869.0], [53.9, 869.0], [54.0, 870.0], [54.1, 870.0], [54.2, 871.0], [54.3, 871.0], [54.4, 871.0], [54.5, 872.0], [54.6, 873.0], [54.7, 873.0], [54.8, 873.0], [54.9, 874.0], [55.0, 875.0], [55.1, 875.0], [55.2, 876.0], [55.3, 876.0], [55.4, 877.0], [55.5, 877.0], [55.6, 878.0], [55.7, 879.0], [55.8, 879.0], [55.9, 880.0], [56.0, 880.0], [56.1, 881.0], [56.2, 881.0], [56.3, 882.0], [56.4, 883.0], [56.5, 883.0], [56.6, 883.0], [56.7, 884.0], [56.8, 884.0], [56.9, 885.0], [57.0, 885.0], [57.1, 886.0], [57.2, 886.0], [57.3, 887.0], [57.4, 887.0], [57.5, 888.0], [57.6, 888.0], [57.7, 889.0], [57.8, 889.0], [57.9, 890.0], [58.0, 891.0], [58.1, 892.0], [58.2, 892.0], [58.3, 893.0], [58.4, 894.0], [58.5, 894.0], [58.6, 895.0], [58.7, 895.0], [58.8, 896.0], [58.9, 896.0], [59.0, 897.0], [59.1, 898.0], [59.2, 898.0], [59.3, 899.0], [59.4, 900.0], [59.5, 900.0], [59.6, 901.0], [59.7, 902.0], [59.8, 902.0], [59.9, 903.0], [60.0, 904.0], [60.1, 904.0], [60.2, 905.0], [60.3, 905.0], [60.4, 906.0], [60.5, 907.0], [60.6, 908.0], [60.7, 908.0], [60.8, 909.0], [60.9, 909.0], [61.0, 910.0], [61.1, 911.0], [61.2, 912.0], [61.3, 912.0], [61.4, 913.0], [61.5, 913.0], [61.6, 914.0], [61.7, 915.0], [61.8, 915.0], [61.9, 916.0], [62.0, 917.0], [62.1, 917.0], [62.2, 918.0], [62.3, 919.0], [62.4, 920.0], [62.5, 920.0], [62.6, 921.0], [62.7, 921.0], [62.8, 922.0], [62.9, 923.0], [63.0, 923.0], [63.1, 924.0], [63.2, 925.0], [63.3, 925.0], [63.4, 926.0], [63.5, 927.0], [63.6, 928.0], [63.7, 929.0], [63.8, 929.0], [63.9, 930.0], [64.0, 930.0], [64.1, 931.0], [64.2, 931.0], [64.3, 932.0], [64.4, 932.0], [64.5, 933.0], [64.6, 934.0], [64.7, 934.0], [64.8, 935.0], [64.9, 935.0], [65.0, 936.0], [65.1, 937.0], [65.2, 938.0], [65.3, 938.0], [65.4, 939.0], [65.5, 940.0], [65.6, 941.0], [65.7, 941.0], [65.8, 942.0], [65.9, 942.0], [66.0, 943.0], [66.1, 943.0], [66.2, 944.0], [66.3, 945.0], [66.4, 945.0], [66.5, 945.0], [66.6, 946.0], [66.7, 947.0], [66.8, 948.0], [66.9, 948.0], [67.0, 949.0], [67.1, 949.0], [67.2, 950.0], [67.3, 950.0], [67.4, 950.0], [67.5, 951.0], [67.6, 952.0], [67.7, 953.0], [67.8, 954.0], [67.9, 955.0], [68.0, 955.0], [68.1, 956.0], [68.2, 957.0], [68.3, 957.0], [68.4, 958.0], [68.5, 959.0], [68.6, 959.0], [68.7, 960.0], [68.8, 960.0], [68.9, 961.0], [69.0, 962.0], [69.1, 962.0], [69.2, 963.0], [69.3, 964.0], [69.4, 965.0], [69.5, 965.0], [69.6, 966.0], [69.7, 966.0], [69.8, 967.0], [69.9, 967.0], [70.0, 968.0], [70.1, 969.0], [70.2, 969.0], [70.3, 970.0], [70.4, 971.0], [70.5, 972.0], [70.6, 973.0], [70.7, 973.0], [70.8, 974.0], [70.9, 975.0], [71.0, 975.0], [71.1, 976.0], [71.2, 976.0], [71.3, 977.0], [71.4, 978.0], [71.5, 978.0], [71.6, 979.0], [71.7, 979.0], [71.8, 979.0], [71.9, 980.0], [72.0, 980.0], [72.1, 981.0], [72.2, 982.0], [72.3, 983.0], [72.4, 984.0], [72.5, 984.0], [72.6, 985.0], [72.7, 986.0], [72.8, 986.0], [72.9, 987.0], [73.0, 987.0], [73.1, 988.0], [73.2, 988.0], [73.3, 989.0], [73.4, 990.0], [73.5, 990.0], [73.6, 991.0], [73.7, 992.0], [73.8, 993.0], [73.9, 993.0], [74.0, 994.0], [74.1, 994.0], [74.2, 996.0], [74.3, 996.0], [74.4, 997.0], [74.5, 998.0], [74.6, 998.0], [74.7, 999.0], [74.8, 1000.0], [74.9, 1001.0], [75.0, 1001.0], [75.1, 1002.0], [75.2, 1002.0], [75.3, 1003.0], [75.4, 1004.0], [75.5, 1005.0], [75.6, 1005.0], [75.7, 1006.0], [75.8, 1007.0], [75.9, 1007.0], [76.0, 1008.0], [76.1, 1009.0], [76.2, 1010.0], [76.3, 1011.0], [76.4, 1012.0], [76.5, 1013.0], [76.6, 1014.0], [76.7, 1014.0], [76.8, 1015.0], [76.9, 1015.0], [77.0, 1016.0], [77.1, 1017.0], [77.2, 1018.0], [77.3, 1019.0], [77.4, 1020.0], [77.5, 1020.0], [77.6, 1021.0], [77.7, 1022.0], [77.8, 1023.0], [77.9, 1024.0], [78.0, 1025.0], [78.1, 1025.0], [78.2, 1026.0], [78.3, 1027.0], [78.4, 1028.0], [78.5, 1028.0], [78.6, 1029.0], [78.7, 1030.0], [78.8, 1031.0], [78.9, 1031.0], [79.0, 1032.0], [79.1, 1034.0], [79.2, 1035.0], [79.3, 1036.0], [79.4, 1037.0], [79.5, 1039.0], [79.6, 1040.0], [79.7, 1041.0], [79.8, 1041.0], [79.9, 1042.0], [80.0, 1043.0], [80.1, 1044.0], [80.2, 1044.0], [80.3, 1046.0], [80.4, 1047.0], [80.5, 1048.0], [80.6, 1049.0], [80.7, 1050.0], [80.8, 1052.0], [80.9, 1052.0], [81.0, 1053.0], [81.1, 1055.0], [81.2, 1056.0], [81.3, 1057.0], [81.4, 1058.0], [81.5, 1060.0], [81.6, 1060.0], [81.7, 1061.0], [81.8, 1062.0], [81.9, 1063.0], [82.0, 1063.0], [82.1, 1065.0], [82.2, 1065.0], [82.3, 1066.0], [82.4, 1067.0], [82.5, 1068.0], [82.6, 1068.0], [82.7, 1069.0], [82.8, 1070.0], [82.9, 1071.0], [83.0, 1072.0], [83.1, 1073.0], [83.2, 1074.0], [83.3, 1075.0], [83.4, 1075.0], [83.5, 1076.0], [83.6, 1077.0], [83.7, 1078.0], [83.8, 1079.0], [83.9, 1080.0], [84.0, 1081.0], [84.1, 1082.0], [84.2, 1084.0], [84.3, 1085.0], [84.4, 1086.0], [84.5, 1087.0], [84.6, 1087.0], [84.7, 1089.0], [84.8, 1090.0], [84.9, 1091.0], [85.0, 1092.0], [85.1, 1093.0], [85.2, 1094.0], [85.3, 1095.0], [85.4, 1097.0], [85.5, 1098.0], [85.6, 1099.0], [85.7, 1100.0], [85.8, 1102.0], [85.9, 1103.0], [86.0, 1105.0], [86.1, 1106.0], [86.2, 1106.0], [86.3, 1108.0], [86.4, 1110.0], [86.5, 1110.0], [86.6, 1112.0], [86.7, 1114.0], [86.8, 1115.0], [86.9, 1116.0], [87.0, 1117.0], [87.1, 1119.0], [87.2, 1121.0], [87.3, 1122.0], [87.4, 1123.0], [87.5, 1125.0], [87.6, 1126.0], [87.7, 1128.0], [87.8, 1129.0], [87.9, 1131.0], [88.0, 1133.0], [88.1, 1134.0], [88.2, 1136.0], [88.3, 1137.0], [88.4, 1138.0], [88.5, 1140.0], [88.6, 1141.0], [88.7, 1143.0], [88.8, 1146.0], [88.9, 1147.0], [89.0, 1148.0], [89.1, 1149.0], [89.2, 1151.0], [89.3, 1153.0], [89.4, 1155.0], [89.5, 1157.0], [89.6, 1159.0], [89.7, 1160.0], [89.8, 1162.0], [89.9, 1164.0], [90.0, 1167.0], [90.1, 1169.0], [90.2, 1171.0], [90.3, 1173.0], [90.4, 1175.0], [90.5, 1176.0], [90.6, 1179.0], [90.7, 1181.0], [90.8, 1183.0], [90.9, 1185.0], [91.0, 1186.0], [91.1, 1188.0], [91.2, 1190.0], [91.3, 1193.0], [91.4, 1196.0], [91.5, 1199.0], [91.6, 1201.0], [91.7, 1205.0], [91.8, 1207.0], [91.9, 1208.0], [92.0, 1210.0], [92.1, 1211.0], [92.2, 1213.0], [92.3, 1216.0], [92.4, 1218.0], [92.5, 1221.0], [92.6, 1223.0], [92.7, 1225.0], [92.8, 1228.0], [92.9, 1230.0], [93.0, 1234.0], [93.1, 1236.0], [93.2, 1240.0], [93.3, 1244.0], [93.4, 1247.0], [93.5, 1252.0], [93.6, 1256.0], [93.7, 1259.0], [93.8, 1264.0], [93.9, 1270.0], [94.0, 1274.0], [94.1, 1278.0], [94.2, 1282.0], [94.3, 1284.0], [94.4, 1287.0], [94.5, 1293.0], [94.6, 1297.0], [94.7, 1302.0], [94.8, 1306.0], [94.9, 1312.0], [95.0, 1317.0], [95.1, 1323.0], [95.2, 1329.0], [95.3, 1336.0], [95.4, 1341.0], [95.5, 1351.0], [95.6, 1364.0], [95.7, 1373.0], [95.8, 1382.0], [95.9, 1391.0], [96.0, 1409.0], [96.1, 1429.0], [96.2, 1447.0], [96.3, 1465.0], [96.4, 1480.0], [96.5, 1503.0], [96.6, 1525.0], [96.7, 1542.0], [96.8, 1562.0], [96.9, 1592.0], [97.0, 1618.0], [97.1, 1647.0], [97.2, 1666.0], [97.3, 1695.0], [97.4, 1728.0], [97.5, 1776.0], [97.6, 1796.0], [97.7, 1813.0], [97.8, 1871.0], [97.9, 2132.0], [98.0, 2204.0], [98.1, 2302.0], [98.2, 2358.0], [98.3, 2389.0], [98.4, 2407.0], [98.5, 2466.0], [98.6, 2503.0], [98.7, 2531.0], [98.8, 2591.0], [98.9, 2640.0], [99.0, 2682.0], [99.1, 2720.0], [99.2, 2738.0], [99.3, 2772.0], [99.4, 2804.0], [99.5, 2869.0], [99.6, 2910.0], [99.7, 2952.0], [99.8, 3017.0], [99.9, 3117.0], [100.0, 10854.0]], "isOverall": false, "label": "GetRandomPhrase", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 1729.0, "series": [{"data": [[0.0, 83.0], [2100.0, 3.0], [2200.0, 2.0], [2300.0, 1.0], [300.0, 1.0], [2400.0, 2.0], [2500.0, 1.0], [100.0, 2.0], [900.0, 1.0], [1900.0, 2.0], [500.0, 1.0], [2000.0, 1.0]], "isOverall": false, "label": "Step1. Login", "isController": false}, {"data": [[0.0, 172.0], [8500.0, 1.0], [600.0, 838.0], [9700.0, 1.0], [9900.0, 2.0], [10700.0, 2.0], [10300.0, 1.0], [700.0, 1375.0], [10800.0, 1.0], [800.0, 1729.0], [900.0, 1536.0], [1000.0, 1089.0], [1100.0, 590.0], [1200.0, 315.0], [1300.0, 126.0], [1400.0, 53.0], [1500.0, 46.0], [100.0, 302.0], [1600.0, 38.0], [1700.0, 33.0], [1800.0, 16.0], [1900.0, 6.0], [2000.0, 3.0], [2100.0, 9.0], [2200.0, 10.0], [2300.0, 28.0], [2400.0, 22.0], [2500.0, 24.0], [2600.0, 21.0], [2700.0, 35.0], [2800.0, 19.0], [2900.0, 20.0], [3000.0, 10.0], [3100.0, 4.0], [200.0, 277.0], [300.0, 378.0], [5200.0, 1.0], [400.0, 405.0], [500.0, 462.0]], "isOverall": false, "label": "GetRandomPhrase", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 10800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 364.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 8110.0, "series": [{"data": [[0.0, 1626.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 8110.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 364.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 63.88536155202815, "minX": 1.59655746E12, "maxY": 98.88095238095218, "series": [{"data": [[1.59655746E12, 75.6898395721925], [1.59655758E12, 63.88536155202815], [1.59655752E12, 98.88095238095218]], "isOverall": false, "label": "Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59655758E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 15.0, "minX": 1.0, "maxY": 2443.0, "series": [{"data": [[3.0, 100.33333333333334], [4.0, 15.0], [5.0, 23.0], [6.0, 19.0], [7.0, 18.0], [8.0, 24.0], [9.0, 29.0], [10.0, 19.0], [11.0, 20.0], [12.0, 27.0], [13.0, 21.0], [14.0, 22.0], [15.0, 21.0], [17.0, 23.0], [18.0, 23.0], [19.0, 332.0], [20.0, 26.0], [21.0, 25.0], [22.0, 32.0], [23.0, 23.0], [24.0, 289.5], [25.0, 26.0], [26.0, 28.0], [27.0, 24.0], [28.0, 42.0], [29.0, 24.0], [31.0, 35.0], [32.0, 30.0], [33.0, 30.0], [34.0, 31.0], [35.0, 34.0], [36.0, 43.0], [37.0, 32.0], [38.0, 35.0], [39.0, 509.0], [40.0, 48.0], [41.0, 38.0], [42.0, 42.0], [43.0, 44.0], [44.0, 37.0], [45.0, 39.0], [46.0, 39.0], [47.0, 39.0], [48.0, 41.0], [49.0, 41.0], [50.0, 44.0], [51.0, 34.0], [52.0, 40.0], [53.0, 40.0], [57.0, 70.0], [58.0, 36.0], [59.0, 39.0], [60.0, 52.0], [61.0, 45.0], [62.0, 66.0], [63.0, 55.0], [64.0, 46.0], [65.0, 48.0], [66.0, 56.0], [67.0, 48.0], [68.0, 52.0], [69.0, 44.0], [70.0, 65.0], [71.0, 52.0], [73.0, 51.0], [74.0, 65.0], [75.0, 2192.0], [76.0, 57.0], [77.0, 1165.5], [78.0, 55.0], [80.0, 1224.5], [81.0, 67.0], [82.0, 67.0], [83.0, 73.0], [84.0, 48.0], [85.0, 74.0], [86.0, 83.0], [87.0, 58.0], [88.0, 62.0], [90.0, 77.0], [91.0, 62.0], [93.0, 61.0], [94.0, 82.0], [96.0, 2443.0], [97.0, 91.0], [98.0, 71.0], [100.0, 2191.375]], "isOverall": false, "label": "Step1. Login", "isController": false}, {"data": [[52.360000000000014, 325.44]], "isOverall": false, "label": "Step1. Login-Aggregated", "isController": false}, {"data": [[2.0, 29.5], [3.0, 42.25], [4.0, 51.857142857142854], [5.0, 38.3], [6.0, 56.0], [7.0, 78.95238095238095], [8.0, 76.66666666666667], [9.0, 42.08333333333333], [10.0, 124.83333333333334], [11.0, 124.66666666666667], [12.0, 116.58333333333333], [13.0, 106.71428571428572], [14.0, 141.28571428571428], [15.0, 92.4], [16.0, 168.3846153846154], [17.0, 171.82352941176472], [18.0, 199.42857142857144], [19.0, 169.64285714285714], [20.0, 139.3076923076923], [21.0, 193.84615384615387], [22.0, 120.0769230769231], [23.0, 200.84615384615384], [24.0, 168.14285714285714], [25.0, 261.36363636363643], [26.0, 216.47058823529414], [27.0, 288.71428571428567], [28.0, 197.0], [29.0, 260.23076923076917], [30.0, 180.41666666666663], [31.0, 389.9333333333334], [32.0, 249.33333333333334], [33.0, 325.8], [34.0, 316.1818181818182], [35.0, 394.81818181818187], [36.0, 288.125], [37.0, 361.923076923077], [38.0, 308.25000000000006], [39.0, 314.6428571428571], [40.0, 298.88888888888886], [41.0, 356.8599999999999], [42.0, 398.9487179487178], [43.0, 489.99999999999994], [44.0, 770.2], [45.0, 422.6545454545456], [46.0, 364.37499999999994], [47.0, 286.4285714285714], [48.0, 482.6153846153845], [49.0, 434.875], [50.0, 300.9], [51.0, 479.8793103448277], [52.0, 601.9333333333333], [53.0, 456.03225806451616], [54.0, 561.1964285714287], [55.0, 490.9375], [56.0, 415.5238095238095], [57.0, 791.6666666666666], [58.0, 576.0952380952381], [59.0, 493.17647058823536], [60.0, 571.7272727272726], [61.0, 537.0], [62.0, 405.4], [63.0, 599.5454545454545], [64.0, 641.1363636363635], [65.0, 644.0], [66.0, 619.9459459459462], [67.0, 600.1600000000001], [68.0, 702.186046511628], [69.0, 757.2272727272726], [70.0, 729.7073170731708], [71.0, 702.3076923076924], [72.0, 582.0], [73.0, 625.1904761904763], [74.0, 866.2], [75.0, 713.6388888888888], [76.0, 721.0000000000001], [77.0, 729.276595744681], [78.0, 705.3548387096777], [79.0, 774.3043478260869], [80.0, 770.1428571428572], [81.0, 824.8902439024394], [82.0, 622.1538461538462], [83.0, 802.3728813559321], [84.0, 660.3055555555557], [85.0, 822.8750000000001], [86.0, 831.5000000000001], [87.0, 794.2222222222222], [88.0, 810.8513513513514], [89.0, 897.6486486486488], [90.0, 892.0666666666667], [91.0, 891.9669669669671], [92.0, 904.575757575758], [93.0, 1041.8390243902436], [94.0, 1080.1521739130433], [95.0, 949.1521739130432], [96.0, 951.3571428571429], [97.0, 788.5208333333334], [98.0, 913.4666666666667], [99.0, 929.0588235294117], [100.0, 953.7342393974127], [1.0, 181.59340659340654]], "isOverall": false, "label": "GetRandomPhrase", "isController": false}, {"data": [[88.6229999999998, 851.3950999999976]], "isOverall": false, "label": "GetRandomPhrase-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 11765.25, "minX": 1.59655746E12, "maxY": 1.7056159416666668E7, "series": [{"data": [[1.59655746E12, 5259777.516666667], [1.59655758E12, 4806898.75], [1.59655752E12, 1.7056159416666668E7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.59655746E12, 14071.6], [1.59655758E12, 11765.25], [1.59655752E12, 43865.5]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59655758E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 325.44, "minX": 1.59655746E12, "maxY": 934.2820876695037, "series": [{"data": [[1.59655746E12, 325.44]], "isOverall": false, "label": "Step1. Login", "isController": false}, {"data": [[1.59655746E12, 752.9259070005102], [1.59655758E12, 655.6484420928863], [1.59655752E12, 934.2820876695037]], "isOverall": false, "label": "GetRandomPhrase", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59655758E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 325.40000000000003, "minX": 1.59655746E12, "maxY": 931.7535477767291, "series": [{"data": [[1.59655746E12, 325.40000000000003]], "isOverall": false, "label": "Step1. Login", "isController": false}, {"data": [[1.59655746E12, 747.7756770567207], [1.59655758E12, 654.4497354497347], [1.59655752E12, 931.7535477767291]], "isOverall": false, "label": "GetRandomPhrase", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59655758E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.59655746E12, "maxY": 1.3700000000000008, "series": [{"data": [[1.59655746E12, 1.3700000000000008]], "isOverall": false, "label": "Step1. Login", "isController": false}, {"data": [[1.59655746E12, 0.0], [1.59655758E12, 5.878894767783678E-4], [1.59655752E12, 0.01040681173131504]], "isOverall": false, "label": "GetRandomPhrase", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59655758E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 15.0, "minX": 1.59655746E12, "maxY": 10854.0, "series": [{"data": [[1.59655746E12, 5217.0], [1.59655758E12, 10854.0], [1.59655752E12, 10788.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.59655746E12, 22.521999509334563], [1.59655758E12, 73.63599918842316], [1.59655752E12, 567.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.59655746E12, 23.0], [1.59655758E12, 75.84980016231538], [1.59655752E12, 573.7957006049156]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.59655746E12, 23.0], [1.59655758E12, 75.16899979710578], [1.59655752E12, 571.2584992438555]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.59655746E12, 15.0], [1.59655758E12, 26.0], [1.59655752E12, 448.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.59655746E12, 444.0], [1.59655758E12, 662.0], [1.59655752E12, 913.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59655758E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 26.0, "minX": 5.0, "maxY": 1731.0, "series": [{"data": [[39.0, 1731.0], [61.0, 158.0], [76.0, 959.0], [81.0, 739.0], [5.0, 158.0], [87.0, 939.0], [89.0, 1013.0], [88.0, 1005.5], [91.0, 762.5], [92.0, 784.5], [95.0, 996.0], [94.0, 1000.5], [98.0, 289.5], [97.0, 907.5], [96.0, 808.5], [6.0, 157.0], [100.0, 828.5], [103.0, 770.0], [102.0, 963.0], [101.0, 876.0], [104.0, 868.5], [105.0, 837.0], [107.0, 904.0], [106.0, 894.5], [109.0, 608.5], [108.0, 847.0], [111.0, 876.0], [110.0, 647.0], [114.0, 882.5], [112.0, 859.0], [113.0, 944.0], [7.0, 155.0], [119.0, 786.0], [117.0, 582.5], [118.0, 838.0], [116.0, 854.0], [121.0, 828.0], [123.0, 948.0], [20.0, 26.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 123.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 25.0, "minX": 5.0, "maxY": 1724.0, "series": [{"data": [[39.0, 1724.0], [61.0, 156.0], [76.0, 950.5], [81.0, 729.0], [5.0, 157.0], [87.0, 936.0], [89.0, 1012.0], [88.0, 1004.0], [91.0, 761.5], [92.0, 765.0], [95.0, 995.0], [94.0, 999.5], [98.0, 289.0], [97.0, 906.5], [96.0, 804.0], [6.0, 156.0], [100.0, 827.5], [103.0, 763.5], [102.0, 962.5], [101.0, 875.0], [104.0, 865.0], [105.0, 834.0], [107.0, 901.0], [106.0, 888.5], [109.0, 603.0], [108.0, 845.0], [111.0, 875.0], [110.0, 646.0], [114.0, 879.5], [112.0, 854.0], [113.0, 943.0], [7.0, 155.0], [119.0, 785.5], [117.0, 576.5], [118.0, 837.5], [116.0, 852.5], [121.0, 827.0], [123.0, 938.0], [20.0, 25.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 123.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 26.833333333333332, "minX": 1.59655746E12, "maxY": 105.55, "series": [{"data": [[1.59655746E12, 35.95], [1.59655758E12, 26.833333333333332], [1.59655752E12, 105.55]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59655758E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 28.35, "minX": 1.59655746E12, "maxY": 105.7, "series": [{"data": [[1.59655746E12, 34.28333333333333], [1.59655758E12, 28.35], [1.59655752E12, 105.7]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59655758E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.6666666666666667, "minX": 1.59655746E12, "maxY": 105.7, "series": [{"data": [[1.59655746E12, 1.6666666666666667]], "isOverall": false, "label": "Step1. Login-success", "isController": false}, {"data": [[1.59655746E12, 32.61666666666667], [1.59655758E12, 28.35], [1.59655752E12, 105.7]], "isOverall": false, "label": "GetRandomPhrase-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59655758E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 28.35, "minX": 1.59655746E12, "maxY": 105.7, "series": [{"data": [[1.59655746E12, 34.28333333333333], [1.59655758E12, 28.35], [1.59655752E12, 105.7]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59655758E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

