/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 31.0, "minX": 0.0, "maxY": 20284.0, "series": [{"data": [[0.0, 31.0], [0.1, 31.0], [0.2, 31.0], [0.3, 31.0], [0.4, 31.0], [0.5, 31.0], [0.6, 31.0], [0.7, 31.0], [0.8, 31.0], [0.9, 31.0], [1.0, 31.0], [1.1, 31.0], [1.2, 31.0], [1.3, 31.0], [1.4, 31.0], [1.5, 31.0], [1.6, 31.0], [1.7, 31.0], [1.8, 31.0], [1.9, 31.0], [2.0, 34.0], [2.1, 34.0], [2.2, 34.0], [2.3, 34.0], [2.4, 34.0], [2.5, 34.0], [2.6, 34.0], [2.7, 34.0], [2.8, 34.0], [2.9, 34.0], [3.0, 34.0], [3.1, 34.0], [3.2, 34.0], [3.3, 34.0], [3.4, 34.0], [3.5, 34.0], [3.6, 34.0], [3.7, 34.0], [3.8, 34.0], [3.9, 34.0], [4.0, 35.0], [4.1, 35.0], [4.2, 35.0], [4.3, 35.0], [4.4, 35.0], [4.5, 35.0], [4.6, 35.0], [4.7, 35.0], [4.8, 35.0], [4.9, 35.0], [5.0, 36.0], [5.1, 36.0], [5.2, 36.0], [5.3, 36.0], [5.4, 36.0], [5.5, 36.0], [5.6, 36.0], [5.7, 36.0], [5.8, 36.0], [5.9, 36.0], [6.0, 37.0], [6.1, 37.0], [6.2, 37.0], [6.3, 37.0], [6.4, 37.0], [6.5, 37.0], [6.6, 37.0], [6.7, 37.0], [6.8, 37.0], [6.9, 37.0], [7.0, 38.0], [7.1, 38.0], [7.2, 38.0], [7.3, 38.0], [7.4, 38.0], [7.5, 38.0], [7.6, 38.0], [7.7, 38.0], [7.8, 38.0], [7.9, 38.0], [8.0, 47.0], [8.1, 47.0], [8.2, 47.0], [8.3, 47.0], [8.4, 47.0], [8.5, 47.0], [8.6, 47.0], [8.7, 47.0], [8.8, 47.0], [8.9, 47.0], [9.0, 47.0], [9.1, 47.0], [9.2, 47.0], [9.3, 47.0], [9.4, 47.0], [9.5, 47.0], [9.6, 47.0], [9.7, 47.0], [9.8, 47.0], [9.9, 47.0], [10.0, 50.0], [10.1, 50.0], [10.2, 50.0], [10.3, 50.0], [10.4, 50.0], [10.5, 50.0], [10.6, 50.0], [10.7, 50.0], [10.8, 50.0], [10.9, 50.0], [11.0, 51.0], [11.1, 51.0], [11.2, 51.0], [11.3, 51.0], [11.4, 51.0], [11.5, 51.0], [11.6, 51.0], [11.7, 51.0], [11.8, 51.0], [11.9, 51.0], [12.0, 53.0], [12.1, 53.0], [12.2, 53.0], [12.3, 53.0], [12.4, 53.0], [12.5, 53.0], [12.6, 53.0], [12.7, 53.0], [12.8, 53.0], [12.9, 53.0], [13.0, 55.0], [13.1, 55.0], [13.2, 55.0], [13.3, 55.0], [13.4, 55.0], [13.5, 55.0], [13.6, 55.0], [13.7, 55.0], [13.8, 55.0], [13.9, 55.0], [14.0, 56.0], [14.1, 56.0], [14.2, 56.0], [14.3, 56.0], [14.4, 56.0], [14.5, 56.0], [14.6, 56.0], [14.7, 56.0], [14.8, 56.0], [14.9, 56.0], [15.0, 57.0], [15.1, 57.0], [15.2, 57.0], [15.3, 57.0], [15.4, 57.0], [15.5, 57.0], [15.6, 57.0], [15.7, 57.0], [15.8, 57.0], [15.9, 57.0], [16.0, 58.0], [16.1, 58.0], [16.2, 58.0], [16.3, 58.0], [16.4, 58.0], [16.5, 58.0], [16.6, 58.0], [16.7, 58.0], [16.8, 58.0], [16.9, 58.0], [17.0, 58.0], [17.1, 58.0], [17.2, 58.0], [17.3, 58.0], [17.4, 58.0], [17.5, 58.0], [17.6, 58.0], [17.7, 58.0], [17.8, 58.0], [17.9, 58.0], [18.0, 59.0], [18.1, 59.0], [18.2, 59.0], [18.3, 59.0], [18.4, 59.0], [18.5, 59.0], [18.6, 59.0], [18.7, 59.0], [18.8, 59.0], [18.9, 59.0], [19.0, 61.0], [19.1, 61.0], [19.2, 61.0], [19.3, 61.0], [19.4, 61.0], [19.5, 61.0], [19.6, 61.0], [19.7, 61.0], [19.8, 61.0], [19.9, 61.0], [20.0, 61.0], [20.1, 61.0], [20.2, 61.0], [20.3, 61.0], [20.4, 61.0], [20.5, 61.0], [20.6, 61.0], [20.7, 61.0], [20.8, 61.0], [20.9, 61.0], [21.0, 61.0], [21.1, 61.0], [21.2, 61.0], [21.3, 61.0], [21.4, 61.0], [21.5, 61.0], [21.6, 61.0], [21.7, 61.0], [21.8, 61.0], [21.9, 61.0], [22.0, 62.0], [22.1, 62.0], [22.2, 62.0], [22.3, 62.0], [22.4, 62.0], [22.5, 62.0], [22.6, 62.0], [22.7, 62.0], [22.8, 62.0], [22.9, 62.0], [23.0, 62.0], [23.1, 62.0], [23.2, 62.0], [23.3, 62.0], [23.4, 62.0], [23.5, 62.0], [23.6, 62.0], [23.7, 62.0], [23.8, 62.0], [23.9, 62.0], [24.0, 65.0], [24.1, 65.0], [24.2, 65.0], [24.3, 65.0], [24.4, 65.0], [24.5, 65.0], [24.6, 65.0], [24.7, 65.0], [24.8, 65.0], [24.9, 65.0], [25.0, 68.0], [25.1, 68.0], [25.2, 68.0], [25.3, 68.0], [25.4, 68.0], [25.5, 68.0], [25.6, 68.0], [25.7, 68.0], [25.8, 68.0], [25.9, 68.0], [26.0, 70.0], [26.1, 70.0], [26.2, 70.0], [26.3, 70.0], [26.4, 70.0], [26.5, 70.0], [26.6, 70.0], [26.7, 70.0], [26.8, 70.0], [26.9, 70.0], [27.0, 72.0], [27.1, 72.0], [27.2, 72.0], [27.3, 72.0], [27.4, 72.0], [27.5, 72.0], [27.6, 72.0], [27.7, 72.0], [27.8, 72.0], [27.9, 72.0], [28.0, 72.0], [28.1, 72.0], [28.2, 72.0], [28.3, 72.0], [28.4, 72.0], [28.5, 72.0], [28.6, 72.0], [28.7, 72.0], [28.8, 72.0], [28.9, 72.0], [29.0, 72.0], [29.1, 72.0], [29.2, 72.0], [29.3, 72.0], [29.4, 72.0], [29.5, 72.0], [29.6, 72.0], [29.7, 72.0], [29.8, 72.0], [29.9, 72.0], [30.0, 73.0], [30.1, 73.0], [30.2, 73.0], [30.3, 73.0], [30.4, 73.0], [30.5, 73.0], [30.6, 73.0], [30.7, 73.0], [30.8, 73.0], [30.9, 73.0], [31.0, 75.0], [31.1, 75.0], [31.2, 75.0], [31.3, 75.0], [31.4, 75.0], [31.5, 75.0], [31.6, 75.0], [31.7, 75.0], [31.8, 75.0], [31.9, 75.0], [32.0, 79.0], [32.1, 79.0], [32.2, 79.0], [32.3, 79.0], [32.4, 79.0], [32.5, 79.0], [32.6, 79.0], [32.7, 79.0], [32.8, 79.0], [32.9, 79.0], [33.0, 81.0], [33.1, 81.0], [33.2, 81.0], [33.3, 81.0], [33.4, 81.0], [33.5, 81.0], [33.6, 81.0], [33.7, 81.0], [33.8, 81.0], [33.9, 81.0], [34.0, 81.0], [34.1, 81.0], [34.2, 81.0], [34.3, 81.0], [34.4, 81.0], [34.5, 81.0], [34.6, 81.0], [34.7, 81.0], [34.8, 81.0], [34.9, 81.0], [35.0, 83.0], [35.1, 83.0], [35.2, 83.0], [35.3, 83.0], [35.4, 83.0], [35.5, 83.0], [35.6, 83.0], [35.7, 83.0], [35.8, 83.0], [35.9, 83.0], [36.0, 83.0], [36.1, 83.0], [36.2, 83.0], [36.3, 83.0], [36.4, 83.0], [36.5, 83.0], [36.6, 83.0], [36.7, 83.0], [36.8, 83.0], [36.9, 83.0], [37.0, 84.0], [37.1, 84.0], [37.2, 84.0], [37.3, 84.0], [37.4, 84.0], [37.5, 84.0], [37.6, 84.0], [37.7, 84.0], [37.8, 84.0], [37.9, 84.0], [38.0, 86.0], [38.1, 86.0], [38.2, 86.0], [38.3, 86.0], [38.4, 86.0], [38.5, 86.0], [38.6, 86.0], [38.7, 86.0], [38.8, 86.0], [38.9, 86.0], [39.0, 86.0], [39.1, 86.0], [39.2, 86.0], [39.3, 86.0], [39.4, 86.0], [39.5, 86.0], [39.6, 86.0], [39.7, 86.0], [39.8, 86.0], [39.9, 86.0], [40.0, 87.0], [40.1, 87.0], [40.2, 87.0], [40.3, 87.0], [40.4, 87.0], [40.5, 87.0], [40.6, 87.0], [40.7, 87.0], [40.8, 87.0], [40.9, 87.0], [41.0, 88.0], [41.1, 88.0], [41.2, 88.0], [41.3, 88.0], [41.4, 88.0], [41.5, 88.0], [41.6, 88.0], [41.7, 88.0], [41.8, 88.0], [41.9, 88.0], [42.0, 94.0], [42.1, 94.0], [42.2, 94.0], [42.3, 94.0], [42.4, 94.0], [42.5, 94.0], [42.6, 94.0], [42.7, 94.0], [42.8, 94.0], [42.9, 94.0], [43.0, 95.0], [43.1, 95.0], [43.2, 95.0], [43.3, 95.0], [43.4, 95.0], [43.5, 95.0], [43.6, 95.0], [43.7, 95.0], [43.8, 95.0], [43.9, 95.0], [44.0, 96.0], [44.1, 96.0], [44.2, 96.0], [44.3, 96.0], [44.4, 96.0], [44.5, 96.0], [44.6, 96.0], [44.7, 96.0], [44.8, 96.0], [44.9, 96.0], [45.0, 99.0], [45.1, 99.0], [45.2, 99.0], [45.3, 99.0], [45.4, 99.0], [45.5, 99.0], [45.6, 99.0], [45.7, 99.0], [45.8, 99.0], [45.9, 99.0], [46.0, 102.0], [46.1, 102.0], [46.2, 102.0], [46.3, 102.0], [46.4, 102.0], [46.5, 102.0], [46.6, 102.0], [46.7, 102.0], [46.8, 102.0], [46.9, 102.0], [47.0, 102.0], [47.1, 102.0], [47.2, 102.0], [47.3, 102.0], [47.4, 102.0], [47.5, 102.0], [47.6, 102.0], [47.7, 102.0], [47.8, 102.0], [47.9, 102.0], [48.0, 106.0], [48.1, 106.0], [48.2, 106.0], [48.3, 106.0], [48.4, 106.0], [48.5, 106.0], [48.6, 106.0], [48.7, 106.0], [48.8, 106.0], [48.9, 106.0], [49.0, 106.0], [49.1, 106.0], [49.2, 106.0], [49.3, 106.0], [49.4, 106.0], [49.5, 106.0], [49.6, 106.0], [49.7, 106.0], [49.8, 106.0], [49.9, 106.0], [50.0, 109.0], [50.1, 109.0], [50.2, 109.0], [50.3, 109.0], [50.4, 109.0], [50.5, 109.0], [50.6, 109.0], [50.7, 109.0], [50.8, 109.0], [50.9, 109.0], [51.0, 110.0], [51.1, 110.0], [51.2, 110.0], [51.3, 110.0], [51.4, 110.0], [51.5, 110.0], [51.6, 110.0], [51.7, 110.0], [51.8, 110.0], [51.9, 110.0], [52.0, 111.0], [52.1, 111.0], [52.2, 111.0], [52.3, 111.0], [52.4, 111.0], [52.5, 111.0], [52.6, 111.0], [52.7, 111.0], [52.8, 111.0], [52.9, 111.0], [53.0, 111.0], [53.1, 111.0], [53.2, 111.0], [53.3, 111.0], [53.4, 111.0], [53.5, 111.0], [53.6, 111.0], [53.7, 111.0], [53.8, 111.0], [53.9, 111.0], [54.0, 112.0], [54.1, 112.0], [54.2, 112.0], [54.3, 112.0], [54.4, 112.0], [54.5, 112.0], [54.6, 112.0], [54.7, 112.0], [54.8, 112.0], [54.9, 112.0], [55.0, 113.0], [55.1, 113.0], [55.2, 113.0], [55.3, 113.0], [55.4, 113.0], [55.5, 113.0], [55.6, 113.0], [55.7, 113.0], [55.8, 113.0], [55.9, 113.0], [56.0, 114.0], [56.1, 114.0], [56.2, 114.0], [56.3, 114.0], [56.4, 114.0], [56.5, 114.0], [56.6, 114.0], [56.7, 114.0], [56.8, 114.0], [56.9, 114.0], [57.0, 118.0], [57.1, 118.0], [57.2, 118.0], [57.3, 118.0], [57.4, 118.0], [57.5, 118.0], [57.6, 118.0], [57.7, 118.0], [57.8, 118.0], [57.9, 118.0], [58.0, 118.0], [58.1, 118.0], [58.2, 118.0], [58.3, 118.0], [58.4, 118.0], [58.5, 118.0], [58.6, 118.0], [58.7, 118.0], [58.8, 118.0], [58.9, 118.0], [59.0, 126.0], [59.1, 126.0], [59.2, 126.0], [59.3, 126.0], [59.4, 126.0], [59.5, 126.0], [59.6, 126.0], [59.7, 126.0], [59.8, 126.0], [59.9, 126.0], [60.0, 133.0], [60.1, 133.0], [60.2, 133.0], [60.3, 133.0], [60.4, 133.0], [60.5, 133.0], [60.6, 133.0], [60.7, 133.0], [60.8, 133.0], [60.9, 133.0], [61.0, 135.0], [61.1, 135.0], [61.2, 135.0], [61.3, 135.0], [61.4, 135.0], [61.5, 135.0], [61.6, 135.0], [61.7, 135.0], [61.8, 135.0], [61.9, 135.0], [62.0, 137.0], [62.1, 137.0], [62.2, 137.0], [62.3, 137.0], [62.4, 137.0], [62.5, 137.0], [62.6, 137.0], [62.7, 137.0], [62.8, 137.0], [62.9, 137.0], [63.0, 137.0], [63.1, 137.0], [63.2, 137.0], [63.3, 137.0], [63.4, 137.0], [63.5, 137.0], [63.6, 137.0], [63.7, 137.0], [63.8, 137.0], [63.9, 137.0], [64.0, 139.0], [64.1, 139.0], [64.2, 139.0], [64.3, 139.0], [64.4, 139.0], [64.5, 139.0], [64.6, 139.0], [64.7, 139.0], [64.8, 139.0], [64.9, 139.0], [65.0, 141.0], [65.1, 141.0], [65.2, 141.0], [65.3, 141.0], [65.4, 141.0], [65.5, 141.0], [65.6, 141.0], [65.7, 141.0], [65.8, 141.0], [65.9, 141.0], [66.0, 143.0], [66.1, 143.0], [66.2, 143.0], [66.3, 143.0], [66.4, 143.0], [66.5, 143.0], [66.6, 143.0], [66.7, 143.0], [66.8, 143.0], [66.9, 143.0], [67.0, 151.0], [67.1, 151.0], [67.2, 151.0], [67.3, 151.0], [67.4, 151.0], [67.5, 151.0], [67.6, 151.0], [67.7, 151.0], [67.8, 151.0], [67.9, 151.0], [68.0, 157.0], [68.1, 157.0], [68.2, 157.0], [68.3, 157.0], [68.4, 157.0], [68.5, 157.0], [68.6, 157.0], [68.7, 157.0], [68.8, 157.0], [68.9, 157.0], [69.0, 160.0], [69.1, 160.0], [69.2, 160.0], [69.3, 160.0], [69.4, 160.0], [69.5, 160.0], [69.6, 160.0], [69.7, 160.0], [69.8, 160.0], [69.9, 160.0], [70.0, 163.0], [70.1, 163.0], [70.2, 163.0], [70.3, 163.0], [70.4, 163.0], [70.5, 163.0], [70.6, 163.0], [70.7, 163.0], [70.8, 163.0], [70.9, 163.0], [71.0, 164.0], [71.1, 164.0], [71.2, 164.0], [71.3, 164.0], [71.4, 164.0], [71.5, 164.0], [71.6, 164.0], [71.7, 164.0], [71.8, 164.0], [71.9, 164.0], [72.0, 169.0], [72.1, 169.0], [72.2, 169.0], [72.3, 169.0], [72.4, 169.0], [72.5, 169.0], [72.6, 169.0], [72.7, 169.0], [72.8, 169.0], [72.9, 169.0], [73.0, 171.0], [73.1, 171.0], [73.2, 171.0], [73.3, 171.0], [73.4, 171.0], [73.5, 171.0], [73.6, 171.0], [73.7, 171.0], [73.8, 171.0], [73.9, 171.0], [74.0, 175.0], [74.1, 175.0], [74.2, 175.0], [74.3, 175.0], [74.4, 175.0], [74.5, 175.0], [74.6, 175.0], [74.7, 175.0], [74.8, 175.0], [74.9, 175.0], [75.0, 178.0], [75.1, 178.0], [75.2, 178.0], [75.3, 178.0], [75.4, 178.0], [75.5, 178.0], [75.6, 178.0], [75.7, 178.0], [75.8, 178.0], [75.9, 178.0], [76.0, 179.0], [76.1, 179.0], [76.2, 179.0], [76.3, 179.0], [76.4, 179.0], [76.5, 179.0], [76.6, 179.0], [76.7, 179.0], [76.8, 179.0], [76.9, 179.0], [77.0, 181.0], [77.1, 181.0], [77.2, 181.0], [77.3, 181.0], [77.4, 181.0], [77.5, 181.0], [77.6, 181.0], [77.7, 181.0], [77.8, 181.0], [77.9, 181.0], [78.0, 183.0], [78.1, 183.0], [78.2, 183.0], [78.3, 183.0], [78.4, 183.0], [78.5, 183.0], [78.6, 183.0], [78.7, 183.0], [78.8, 183.0], [78.9, 183.0], [79.0, 184.0], [79.1, 184.0], [79.2, 184.0], [79.3, 184.0], [79.4, 184.0], [79.5, 184.0], [79.6, 184.0], [79.7, 184.0], [79.8, 184.0], [79.9, 184.0], [80.0, 187.0], [80.1, 187.0], [80.2, 187.0], [80.3, 187.0], [80.4, 187.0], [80.5, 187.0], [80.6, 187.0], [80.7, 187.0], [80.8, 187.0], [80.9, 187.0], [81.0, 189.0], [81.1, 189.0], [81.2, 189.0], [81.3, 189.0], [81.4, 189.0], [81.5, 189.0], [81.6, 189.0], [81.7, 189.0], [81.8, 189.0], [81.9, 189.0], [82.0, 192.0], [82.1, 192.0], [82.2, 192.0], [82.3, 192.0], [82.4, 192.0], [82.5, 192.0], [82.6, 192.0], [82.7, 192.0], [82.8, 192.0], [82.9, 192.0], [83.0, 198.0], [83.1, 198.0], [83.2, 198.0], [83.3, 198.0], [83.4, 198.0], [83.5, 198.0], [83.6, 198.0], [83.7, 198.0], [83.8, 198.0], [83.9, 198.0], [84.0, 199.0], [84.1, 199.0], [84.2, 199.0], [84.3, 199.0], [84.4, 199.0], [84.5, 199.0], [84.6, 199.0], [84.7, 199.0], [84.8, 199.0], [84.9, 199.0], [85.0, 200.0], [85.1, 200.0], [85.2, 200.0], [85.3, 200.0], [85.4, 200.0], [85.5, 200.0], [85.6, 200.0], [85.7, 200.0], [85.8, 200.0], [85.9, 200.0], [86.0, 205.0], [86.1, 205.0], [86.2, 205.0], [86.3, 205.0], [86.4, 205.0], [86.5, 205.0], [86.6, 205.0], [86.7, 205.0], [86.8, 205.0], [86.9, 205.0], [87.0, 208.0], [87.1, 208.0], [87.2, 208.0], [87.3, 208.0], [87.4, 208.0], [87.5, 208.0], [87.6, 208.0], [87.7, 208.0], [87.8, 208.0], [87.9, 208.0], [88.0, 219.0], [88.1, 219.0], [88.2, 219.0], [88.3, 219.0], [88.4, 219.0], [88.5, 219.0], [88.6, 219.0], [88.7, 219.0], [88.8, 219.0], [88.9, 219.0], [89.0, 220.0], [89.1, 220.0], [89.2, 220.0], [89.3, 220.0], [89.4, 220.0], [89.5, 220.0], [89.6, 220.0], [89.7, 220.0], [89.8, 220.0], [89.9, 220.0], [90.0, 236.0], [90.1, 236.0], [90.2, 236.0], [90.3, 236.0], [90.4, 236.0], [90.5, 236.0], [90.6, 236.0], [90.7, 236.0], [90.8, 236.0], [90.9, 236.0], [91.0, 241.0], [91.1, 241.0], [91.2, 241.0], [91.3, 241.0], [91.4, 241.0], [91.5, 241.0], [91.6, 241.0], [91.7, 241.0], [91.8, 241.0], [91.9, 241.0], [92.0, 254.0], [92.1, 254.0], [92.2, 254.0], [92.3, 254.0], [92.4, 254.0], [92.5, 254.0], [92.6, 254.0], [92.7, 254.0], [92.8, 254.0], [92.9, 254.0], [93.0, 269.0], [93.1, 269.0], [93.2, 269.0], [93.3, 269.0], [93.4, 269.0], [93.5, 269.0], [93.6, 269.0], [93.7, 269.0], [93.8, 269.0], [93.9, 269.0], [94.0, 276.0], [94.1, 276.0], [94.2, 276.0], [94.3, 276.0], [94.4, 276.0], [94.5, 276.0], [94.6, 276.0], [94.7, 276.0], [94.8, 276.0], [94.9, 276.0], [95.0, 286.0], [95.1, 286.0], [95.2, 286.0], [95.3, 286.0], [95.4, 286.0], [95.5, 286.0], [95.6, 286.0], [95.7, 286.0], [95.8, 286.0], [95.9, 286.0], [96.0, 296.0], [96.1, 296.0], [96.2, 296.0], [96.3, 296.0], [96.4, 296.0], [96.5, 296.0], [96.6, 296.0], [96.7, 296.0], [96.8, 296.0], [96.9, 296.0], [97.0, 319.0], [97.1, 319.0], [97.2, 319.0], [97.3, 319.0], [97.4, 319.0], [97.5, 319.0], [97.6, 319.0], [97.7, 319.0], [97.8, 319.0], [97.9, 319.0], [98.0, 334.0], [98.1, 334.0], [98.2, 334.0], [98.3, 334.0], [98.4, 334.0], [98.5, 334.0], [98.6, 334.0], [98.7, 334.0], [98.8, 334.0], [98.9, 334.0], [99.0, 353.0], [99.1, 353.0], [99.2, 353.0], [99.3, 353.0], [99.4, 353.0], [99.5, 353.0], [99.6, 353.0], [99.7, 353.0], [99.8, 353.0], [99.9, 353.0]], "isOverall": false, "label": "Step1. Login", "isController": false}, {"data": [[0.0, 35.0], [0.1, 55.0], [0.2, 71.0], [0.3, 80.0], [0.4, 95.0], [0.5, 118.0], [0.6, 136.0], [0.7, 155.0], [0.8, 169.0], [0.9, 187.0], [1.0, 205.0], [1.1, 222.0], [1.2, 238.0], [1.3, 249.0], [1.4, 267.0], [1.5, 279.0], [1.6, 289.0], [1.7, 299.0], [1.8, 306.0], [1.9, 311.0], [2.0, 315.0], [2.1, 321.0], [2.2, 323.0], [2.3, 325.0], [2.4, 330.0], [2.5, 333.0], [2.6, 335.0], [2.7, 341.0], [2.8, 345.0], [2.9, 347.0], [3.0, 354.0], [3.1, 364.0], [3.2, 371.0], [3.3, 379.0], [3.4, 389.0], [3.5, 407.0], [3.6, 414.0], [3.7, 433.0], [3.8, 447.0], [3.9, 458.0], [4.0, 466.0], [4.1, 482.0], [4.2, 492.0], [4.3, 504.0], [4.4, 515.0], [4.5, 529.0], [4.6, 541.0], [4.7, 557.0], [4.8, 566.0], [4.9, 577.0], [5.0, 586.0], [5.1, 594.0], [5.2, 604.0], [5.3, 612.0], [5.4, 624.0], [5.5, 632.0], [5.6, 644.0], [5.7, 650.0], [5.8, 659.0], [5.9, 663.0], [6.0, 668.0], [6.1, 679.0], [6.2, 690.0], [6.3, 697.0], [6.4, 705.0], [6.5, 720.0], [6.6, 725.0], [6.7, 728.0], [6.8, 739.0], [6.9, 747.0], [7.0, 753.0], [7.1, 760.0], [7.2, 767.0], [7.3, 774.0], [7.4, 784.0], [7.5, 789.0], [7.6, 796.0], [7.7, 804.0], [7.8, 810.0], [7.9, 814.0], [8.0, 823.0], [8.1, 828.0], [8.2, 834.0], [8.3, 840.0], [8.4, 844.0], [8.5, 849.0], [8.6, 851.0], [8.7, 853.0], [8.8, 858.0], [8.9, 860.0], [9.0, 869.0], [9.1, 872.0], [9.2, 875.0], [9.3, 878.0], [9.4, 882.0], [9.5, 885.0], [9.6, 889.0], [9.7, 894.0], [9.8, 898.0], [9.9, 901.0], [10.0, 904.0], [10.1, 909.0], [10.2, 914.0], [10.3, 917.0], [10.4, 920.0], [10.5, 924.0], [10.6, 928.0], [10.7, 931.0], [10.8, 934.0], [10.9, 938.0], [11.0, 941.0], [11.1, 943.0], [11.2, 945.0], [11.3, 947.0], [11.4, 950.0], [11.5, 954.0], [11.6, 956.0], [11.7, 957.0], [11.8, 960.0], [11.9, 962.0], [12.0, 963.0], [12.1, 965.0], [12.2, 966.0], [12.3, 969.0], [12.4, 970.0], [12.5, 972.0], [12.6, 974.0], [12.7, 976.0], [12.8, 978.0], [12.9, 979.0], [13.0, 981.0], [13.1, 984.0], [13.2, 987.0], [13.3, 988.0], [13.4, 990.0], [13.5, 992.0], [13.6, 994.0], [13.7, 996.0], [13.8, 998.0], [13.9, 999.0], [14.0, 1000.0], [14.1, 1002.0], [14.2, 1003.0], [14.3, 1005.0], [14.4, 1007.0], [14.5, 1008.0], [14.6, 1009.0], [14.7, 1010.0], [14.8, 1012.0], [14.9, 1014.0], [15.0, 1016.0], [15.1, 1018.0], [15.2, 1019.0], [15.3, 1021.0], [15.4, 1021.0], [15.5, 1024.0], [15.6, 1025.0], [15.7, 1026.0], [15.8, 1027.0], [15.9, 1029.0], [16.0, 1031.0], [16.1, 1032.0], [16.2, 1034.0], [16.3, 1035.0], [16.4, 1036.0], [16.5, 1038.0], [16.6, 1039.0], [16.7, 1041.0], [16.8, 1042.0], [16.9, 1043.0], [17.0, 1044.0], [17.1, 1046.0], [17.2, 1047.0], [17.3, 1048.0], [17.4, 1049.0], [17.5, 1050.0], [17.6, 1050.0], [17.7, 1051.0], [17.8, 1052.0], [17.9, 1054.0], [18.0, 1055.0], [18.1, 1056.0], [18.2, 1058.0], [18.3, 1060.0], [18.4, 1060.0], [18.5, 1062.0], [18.6, 1063.0], [18.7, 1064.0], [18.8, 1066.0], [18.9, 1067.0], [19.0, 1068.0], [19.1, 1070.0], [19.2, 1071.0], [19.3, 1072.0], [19.4, 1073.0], [19.5, 1075.0], [19.6, 1076.0], [19.7, 1076.0], [19.8, 1077.0], [19.9, 1078.0], [20.0, 1079.0], [20.1, 1080.0], [20.2, 1081.0], [20.3, 1082.0], [20.4, 1083.0], [20.5, 1084.0], [20.6, 1085.0], [20.7, 1086.0], [20.8, 1087.0], [20.9, 1088.0], [21.0, 1089.0], [21.1, 1090.0], [21.2, 1092.0], [21.3, 1093.0], [21.4, 1094.0], [21.5, 1096.0], [21.6, 1097.0], [21.7, 1097.0], [21.8, 1098.0], [21.9, 1100.0], [22.0, 1101.0], [22.1, 1102.0], [22.2, 1103.0], [22.3, 1104.0], [22.4, 1105.0], [22.5, 1106.0], [22.6, 1106.0], [22.7, 1107.0], [22.8, 1108.0], [22.9, 1109.0], [23.0, 1110.0], [23.1, 1111.0], [23.2, 1112.0], [23.3, 1113.0], [23.4, 1114.0], [23.5, 1115.0], [23.6, 1116.0], [23.7, 1117.0], [23.8, 1118.0], [23.9, 1119.0], [24.0, 1119.0], [24.1, 1120.0], [24.2, 1121.0], [24.3, 1122.0], [24.4, 1122.0], [24.5, 1124.0], [24.6, 1124.0], [24.7, 1125.0], [24.8, 1126.0], [24.9, 1127.0], [25.0, 1128.0], [25.1, 1129.0], [25.2, 1130.0], [25.3, 1131.0], [25.4, 1132.0], [25.5, 1133.0], [25.6, 1134.0], [25.7, 1134.0], [25.8, 1135.0], [25.9, 1136.0], [26.0, 1137.0], [26.1, 1138.0], [26.2, 1138.0], [26.3, 1140.0], [26.4, 1140.0], [26.5, 1141.0], [26.6, 1142.0], [26.7, 1143.0], [26.8, 1144.0], [26.9, 1144.0], [27.0, 1145.0], [27.1, 1146.0], [27.2, 1147.0], [27.3, 1148.0], [27.4, 1149.0], [27.5, 1150.0], [27.6, 1151.0], [27.7, 1152.0], [27.8, 1153.0], [27.9, 1154.0], [28.0, 1155.0], [28.1, 1156.0], [28.2, 1156.0], [28.3, 1157.0], [28.4, 1157.0], [28.5, 1158.0], [28.6, 1159.0], [28.7, 1160.0], [28.8, 1160.0], [28.9, 1161.0], [29.0, 1162.0], [29.1, 1162.0], [29.2, 1163.0], [29.3, 1163.0], [29.4, 1165.0], [29.5, 1166.0], [29.6, 1166.0], [29.7, 1167.0], [29.8, 1167.0], [29.9, 1168.0], [30.0, 1169.0], [30.1, 1169.0], [30.2, 1170.0], [30.3, 1170.0], [30.4, 1171.0], [30.5, 1172.0], [30.6, 1173.0], [30.7, 1174.0], [30.8, 1175.0], [30.9, 1175.0], [31.0, 1176.0], [31.1, 1177.0], [31.2, 1177.0], [31.3, 1178.0], [31.4, 1179.0], [31.5, 1180.0], [31.6, 1181.0], [31.7, 1182.0], [31.8, 1182.0], [31.9, 1183.0], [32.0, 1184.0], [32.1, 1186.0], [32.2, 1186.0], [32.3, 1187.0], [32.4, 1188.0], [32.5, 1189.0], [32.6, 1190.0], [32.7, 1190.0], [32.8, 1191.0], [32.9, 1192.0], [33.0, 1192.0], [33.1, 1193.0], [33.2, 1194.0], [33.3, 1194.0], [33.4, 1195.0], [33.5, 1196.0], [33.6, 1197.0], [33.7, 1198.0], [33.8, 1199.0], [33.9, 1199.0], [34.0, 1200.0], [34.1, 1201.0], [34.2, 1202.0], [34.3, 1203.0], [34.4, 1204.0], [34.5, 1205.0], [34.6, 1205.0], [34.7, 1206.0], [34.8, 1207.0], [34.9, 1208.0], [35.0, 1209.0], [35.1, 1210.0], [35.2, 1210.0], [35.3, 1212.0], [35.4, 1212.0], [35.5, 1213.0], [35.6, 1214.0], [35.7, 1215.0], [35.8, 1215.0], [35.9, 1216.0], [36.0, 1216.0], [36.1, 1217.0], [36.2, 1218.0], [36.3, 1219.0], [36.4, 1219.0], [36.5, 1220.0], [36.6, 1221.0], [36.7, 1222.0], [36.8, 1222.0], [36.9, 1223.0], [37.0, 1224.0], [37.1, 1224.0], [37.2, 1225.0], [37.3, 1226.0], [37.4, 1227.0], [37.5, 1228.0], [37.6, 1228.0], [37.7, 1229.0], [37.8, 1230.0], [37.9, 1231.0], [38.0, 1231.0], [38.1, 1232.0], [38.2, 1233.0], [38.3, 1233.0], [38.4, 1234.0], [38.5, 1235.0], [38.6, 1236.0], [38.7, 1237.0], [38.8, 1237.0], [38.9, 1238.0], [39.0, 1239.0], [39.1, 1239.0], [39.2, 1240.0], [39.3, 1241.0], [39.4, 1242.0], [39.5, 1243.0], [39.6, 1244.0], [39.7, 1244.0], [39.8, 1245.0], [39.9, 1246.0], [40.0, 1247.0], [40.1, 1248.0], [40.2, 1249.0], [40.3, 1250.0], [40.4, 1251.0], [40.5, 1252.0], [40.6, 1253.0], [40.7, 1253.0], [40.8, 1254.0], [40.9, 1254.0], [41.0, 1255.0], [41.1, 1256.0], [41.2, 1257.0], [41.3, 1258.0], [41.4, 1258.0], [41.5, 1259.0], [41.6, 1260.0], [41.7, 1261.0], [41.8, 1261.0], [41.9, 1262.0], [42.0, 1263.0], [42.1, 1263.0], [42.2, 1264.0], [42.3, 1265.0], [42.4, 1265.0], [42.5, 1266.0], [42.6, 1267.0], [42.7, 1268.0], [42.8, 1269.0], [42.9, 1269.0], [43.0, 1270.0], [43.1, 1271.0], [43.2, 1272.0], [43.3, 1272.0], [43.4, 1273.0], [43.5, 1274.0], [43.6, 1275.0], [43.7, 1276.0], [43.8, 1276.0], [43.9, 1277.0], [44.0, 1278.0], [44.1, 1278.0], [44.2, 1279.0], [44.3, 1279.0], [44.4, 1279.0], [44.5, 1280.0], [44.6, 1281.0], [44.7, 1282.0], [44.8, 1283.0], [44.9, 1284.0], [45.0, 1284.0], [45.1, 1285.0], [45.2, 1286.0], [45.3, 1287.0], [45.4, 1288.0], [45.5, 1289.0], [45.6, 1290.0], [45.7, 1290.0], [45.8, 1291.0], [45.9, 1292.0], [46.0, 1292.0], [46.1, 1293.0], [46.2, 1294.0], [46.3, 1295.0], [46.4, 1296.0], [46.5, 1296.0], [46.6, 1297.0], [46.7, 1298.0], [46.8, 1299.0], [46.9, 1299.0], [47.0, 1300.0], [47.1, 1301.0], [47.2, 1301.0], [47.3, 1302.0], [47.4, 1303.0], [47.5, 1303.0], [47.6, 1304.0], [47.7, 1305.0], [47.8, 1306.0], [47.9, 1307.0], [48.0, 1308.0], [48.1, 1309.0], [48.2, 1309.0], [48.3, 1310.0], [48.4, 1311.0], [48.5, 1312.0], [48.6, 1312.0], [48.7, 1313.0], [48.8, 1313.0], [48.9, 1314.0], [49.0, 1315.0], [49.1, 1315.0], [49.2, 1317.0], [49.3, 1317.0], [49.4, 1318.0], [49.5, 1319.0], [49.6, 1320.0], [49.7, 1321.0], [49.8, 1321.0], [49.9, 1322.0], [50.0, 1323.0], [50.1, 1323.0], [50.2, 1324.0], [50.3, 1325.0], [50.4, 1326.0], [50.5, 1326.0], [50.6, 1328.0], [50.7, 1328.0], [50.8, 1329.0], [50.9, 1330.0], [51.0, 1331.0], [51.1, 1331.0], [51.2, 1332.0], [51.3, 1333.0], [51.4, 1333.0], [51.5, 1334.0], [51.6, 1335.0], [51.7, 1335.0], [51.8, 1336.0], [51.9, 1336.0], [52.0, 1337.0], [52.1, 1338.0], [52.2, 1339.0], [52.3, 1340.0], [52.4, 1341.0], [52.5, 1341.0], [52.6, 1342.0], [52.7, 1343.0], [52.8, 1344.0], [52.9, 1345.0], [53.0, 1346.0], [53.1, 1347.0], [53.2, 1348.0], [53.3, 1349.0], [53.4, 1349.0], [53.5, 1350.0], [53.6, 1351.0], [53.7, 1352.0], [53.8, 1353.0], [53.9, 1354.0], [54.0, 1355.0], [54.1, 1355.0], [54.2, 1356.0], [54.3, 1357.0], [54.4, 1358.0], [54.5, 1358.0], [54.6, 1359.0], [54.7, 1359.0], [54.8, 1360.0], [54.9, 1361.0], [55.0, 1362.0], [55.1, 1362.0], [55.2, 1363.0], [55.3, 1364.0], [55.4, 1364.0], [55.5, 1365.0], [55.6, 1366.0], [55.7, 1367.0], [55.8, 1368.0], [55.9, 1369.0], [56.0, 1370.0], [56.1, 1371.0], [56.2, 1372.0], [56.3, 1373.0], [56.4, 1374.0], [56.5, 1375.0], [56.6, 1375.0], [56.7, 1376.0], [56.8, 1377.0], [56.9, 1377.0], [57.0, 1378.0], [57.1, 1378.0], [57.2, 1379.0], [57.3, 1380.0], [57.4, 1381.0], [57.5, 1382.0], [57.6, 1382.0], [57.7, 1384.0], [57.8, 1384.0], [57.9, 1385.0], [58.0, 1385.0], [58.1, 1386.0], [58.2, 1387.0], [58.3, 1388.0], [58.4, 1389.0], [58.5, 1390.0], [58.6, 1391.0], [58.7, 1391.0], [58.8, 1392.0], [58.9, 1393.0], [59.0, 1393.0], [59.1, 1394.0], [59.2, 1394.0], [59.3, 1395.0], [59.4, 1396.0], [59.5, 1397.0], [59.6, 1397.0], [59.7, 1398.0], [59.8, 1399.0], [59.9, 1399.0], [60.0, 1400.0], [60.1, 1401.0], [60.2, 1402.0], [60.3, 1402.0], [60.4, 1403.0], [60.5, 1405.0], [60.6, 1405.0], [60.7, 1406.0], [60.8, 1406.0], [60.9, 1406.0], [61.0, 1407.0], [61.1, 1408.0], [61.2, 1408.0], [61.3, 1409.0], [61.4, 1410.0], [61.5, 1410.0], [61.6, 1411.0], [61.7, 1412.0], [61.8, 1412.0], [61.9, 1413.0], [62.0, 1414.0], [62.1, 1414.0], [62.2, 1415.0], [62.3, 1416.0], [62.4, 1416.0], [62.5, 1417.0], [62.6, 1418.0], [62.7, 1419.0], [62.8, 1420.0], [62.9, 1421.0], [63.0, 1421.0], [63.1, 1422.0], [63.2, 1422.0], [63.3, 1424.0], [63.4, 1424.0], [63.5, 1425.0], [63.6, 1425.0], [63.7, 1426.0], [63.8, 1428.0], [63.9, 1429.0], [64.0, 1429.0], [64.1, 1430.0], [64.2, 1431.0], [64.3, 1432.0], [64.4, 1433.0], [64.5, 1433.0], [64.6, 1434.0], [64.7, 1435.0], [64.8, 1436.0], [64.9, 1437.0], [65.0, 1438.0], [65.1, 1438.0], [65.2, 1438.0], [65.3, 1439.0], [65.4, 1440.0], [65.5, 1441.0], [65.6, 1442.0], [65.7, 1442.0], [65.8, 1443.0], [65.9, 1444.0], [66.0, 1445.0], [66.1, 1445.0], [66.2, 1446.0], [66.3, 1447.0], [66.4, 1448.0], [66.5, 1449.0], [66.6, 1450.0], [66.7, 1451.0], [66.8, 1452.0], [66.9, 1452.0], [67.0, 1453.0], [67.1, 1454.0], [67.2, 1455.0], [67.3, 1455.0], [67.4, 1456.0], [67.5, 1456.0], [67.6, 1457.0], [67.7, 1458.0], [67.8, 1459.0], [67.9, 1460.0], [68.0, 1460.0], [68.1, 1461.0], [68.2, 1462.0], [68.3, 1463.0], [68.4, 1464.0], [68.5, 1465.0], [68.6, 1465.0], [68.7, 1466.0], [68.8, 1467.0], [68.9, 1468.0], [69.0, 1468.0], [69.1, 1469.0], [69.2, 1470.0], [69.3, 1472.0], [69.4, 1472.0], [69.5, 1473.0], [69.6, 1473.0], [69.7, 1474.0], [69.8, 1475.0], [69.9, 1476.0], [70.0, 1477.0], [70.1, 1478.0], [70.2, 1479.0], [70.3, 1480.0], [70.4, 1481.0], [70.5, 1482.0], [70.6, 1483.0], [70.7, 1484.0], [70.8, 1485.0], [70.9, 1485.0], [71.0, 1486.0], [71.1, 1487.0], [71.2, 1488.0], [71.3, 1488.0], [71.4, 1490.0], [71.5, 1490.0], [71.6, 1491.0], [71.7, 1492.0], [71.8, 1493.0], [71.9, 1494.0], [72.0, 1494.0], [72.1, 1496.0], [72.2, 1497.0], [72.3, 1498.0], [72.4, 1500.0], [72.5, 1501.0], [72.6, 1502.0], [72.7, 1503.0], [72.8, 1504.0], [72.9, 1505.0], [73.0, 1506.0], [73.1, 1507.0], [73.2, 1508.0], [73.3, 1509.0], [73.4, 1510.0], [73.5, 1512.0], [73.6, 1512.0], [73.7, 1513.0], [73.8, 1514.0], [73.9, 1515.0], [74.0, 1516.0], [74.1, 1517.0], [74.2, 1518.0], [74.3, 1520.0], [74.4, 1521.0], [74.5, 1522.0], [74.6, 1523.0], [74.7, 1525.0], [74.8, 1526.0], [74.9, 1528.0], [75.0, 1528.0], [75.1, 1529.0], [75.2, 1531.0], [75.3, 1531.0], [75.4, 1533.0], [75.5, 1534.0], [75.6, 1535.0], [75.7, 1536.0], [75.8, 1538.0], [75.9, 1539.0], [76.0, 1540.0], [76.1, 1542.0], [76.2, 1543.0], [76.3, 1544.0], [76.4, 1545.0], [76.5, 1547.0], [76.6, 1548.0], [76.7, 1550.0], [76.8, 1550.0], [76.9, 1551.0], [77.0, 1553.0], [77.1, 1554.0], [77.2, 1556.0], [77.3, 1556.0], [77.4, 1558.0], [77.5, 1559.0], [77.6, 1560.0], [77.7, 1561.0], [77.8, 1562.0], [77.9, 1564.0], [78.0, 1565.0], [78.1, 1566.0], [78.2, 1567.0], [78.3, 1568.0], [78.4, 1569.0], [78.5, 1571.0], [78.6, 1572.0], [78.7, 1574.0], [78.8, 1575.0], [78.9, 1576.0], [79.0, 1578.0], [79.1, 1580.0], [79.2, 1580.0], [79.3, 1582.0], [79.4, 1583.0], [79.5, 1584.0], [79.6, 1585.0], [79.7, 1586.0], [79.8, 1587.0], [79.9, 1588.0], [80.0, 1589.0], [80.1, 1590.0], [80.2, 1592.0], [80.3, 1593.0], [80.4, 1594.0], [80.5, 1595.0], [80.6, 1597.0], [80.7, 1599.0], [80.8, 1599.0], [80.9, 1600.0], [81.0, 1602.0], [81.1, 1604.0], [81.2, 1606.0], [81.3, 1607.0], [81.4, 1608.0], [81.5, 1609.0], [81.6, 1610.0], [81.7, 1611.0], [81.8, 1612.0], [81.9, 1613.0], [82.0, 1614.0], [82.1, 1616.0], [82.2, 1618.0], [82.3, 1620.0], [82.4, 1621.0], [82.5, 1623.0], [82.6, 1625.0], [82.7, 1625.0], [82.8, 1627.0], [82.9, 1628.0], [83.0, 1629.0], [83.1, 1630.0], [83.2, 1632.0], [83.3, 1633.0], [83.4, 1635.0], [83.5, 1637.0], [83.6, 1638.0], [83.7, 1640.0], [83.8, 1643.0], [83.9, 1644.0], [84.0, 1646.0], [84.1, 1647.0], [84.2, 1649.0], [84.3, 1651.0], [84.4, 1652.0], [84.5, 1654.0], [84.6, 1656.0], [84.7, 1658.0], [84.8, 1659.0], [84.9, 1660.0], [85.0, 1662.0], [85.1, 1664.0], [85.2, 1666.0], [85.3, 1668.0], [85.4, 1670.0], [85.5, 1671.0], [85.6, 1673.0], [85.7, 1677.0], [85.8, 1678.0], [85.9, 1681.0], [86.0, 1683.0], [86.1, 1684.0], [86.2, 1687.0], [86.3, 1689.0], [86.4, 1691.0], [86.5, 1692.0], [86.6, 1693.0], [86.7, 1696.0], [86.8, 1698.0], [86.9, 1700.0], [87.0, 1701.0], [87.1, 1702.0], [87.2, 1704.0], [87.3, 1708.0], [87.4, 1709.0], [87.5, 1711.0], [87.6, 1713.0], [87.7, 1715.0], [87.8, 1717.0], [87.9, 1720.0], [88.0, 1721.0], [88.1, 1723.0], [88.2, 1724.0], [88.3, 1727.0], [88.4, 1729.0], [88.5, 1731.0], [88.6, 1733.0], [88.7, 1735.0], [88.8, 1736.0], [88.9, 1737.0], [89.0, 1739.0], [89.1, 1743.0], [89.2, 1744.0], [89.3, 1746.0], [89.4, 1749.0], [89.5, 1752.0], [89.6, 1755.0], [89.7, 1756.0], [89.8, 1759.0], [89.9, 1761.0], [90.0, 1763.0], [90.1, 1766.0], [90.2, 1768.0], [90.3, 1770.0], [90.4, 1772.0], [90.5, 1775.0], [90.6, 1777.0], [90.7, 1781.0], [90.8, 1784.0], [90.9, 1785.0], [91.0, 1789.0], [91.1, 1791.0], [91.2, 1794.0], [91.3, 1796.0], [91.4, 1799.0], [91.5, 1801.0], [91.6, 1803.0], [91.7, 1806.0], [91.8, 1809.0], [91.9, 1810.0], [92.0, 1814.0], [92.1, 1819.0], [92.2, 1822.0], [92.3, 1824.0], [92.4, 1827.0], [92.5, 1831.0], [92.6, 1834.0], [92.7, 1837.0], [92.8, 1841.0], [92.9, 1843.0], [93.0, 1848.0], [93.1, 1853.0], [93.2, 1858.0], [93.3, 1860.0], [93.4, 1863.0], [93.5, 1867.0], [93.6, 1871.0], [93.7, 1874.0], [93.8, 1876.0], [93.9, 1883.0], [94.0, 1887.0], [94.1, 1892.0], [94.2, 1897.0], [94.3, 1902.0], [94.4, 1904.0], [94.5, 1907.0], [94.6, 1910.0], [94.7, 1914.0], [94.8, 1917.0], [94.9, 1924.0], [95.0, 1930.0], [95.1, 1935.0], [95.2, 1941.0], [95.3, 1948.0], [95.4, 1952.0], [95.5, 1958.0], [95.6, 1963.0], [95.7, 1967.0], [95.8, 1974.0], [95.9, 1982.0], [96.0, 1992.0], [96.1, 1998.0], [96.2, 2006.0], [96.3, 2011.0], [96.4, 2018.0], [96.5, 2027.0], [96.6, 2034.0], [96.7, 2044.0], [96.8, 2053.0], [96.9, 2061.0], [97.0, 2078.0], [97.1, 2089.0], [97.2, 2097.0], [97.3, 2111.0], [97.4, 2116.0], [97.5, 2132.0], [97.6, 2141.0], [97.7, 2158.0], [97.8, 2170.0], [97.9, 2183.0], [98.0, 2196.0], [98.1, 2221.0], [98.2, 2236.0], [98.3, 2261.0], [98.4, 2284.0], [98.5, 2302.0], [98.6, 2322.0], [98.7, 2349.0], [98.8, 2366.0], [98.9, 2410.0], [99.0, 2446.0], [99.1, 2487.0], [99.2, 2549.0], [99.3, 2634.0], [99.4, 2706.0], [99.5, 2774.0], [99.6, 2849.0], [99.7, 3023.0], [99.8, 3255.0], [99.9, 3601.0], [100.0, 20284.0]], "isOverall": false, "label": "GetRandomPhrase", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 1300.0, "series": [{"data": [[0.0, 46.0], [300.0, 3.0], [100.0, 39.0], [200.0, 12.0]], "isOverall": false, "label": "Step1. Login", "isController": false}, {"data": [[0.0, 40.0], [600.0, 115.0], [700.0, 135.0], [800.0, 222.0], [900.0, 409.0], [1000.0, 789.0], [16100.0, 1.0], [1100.0, 1209.0], [18000.0, 1.0], [17900.0, 1.0], [1200.0, 1298.0], [19400.0, 1.0], [19300.0, 1.0], [20000.0, 1.0], [20200.0, 1.0], [1300.0, 1300.0], [1400.0, 1244.0], [1500.0, 846.0], [100.0, 55.0], [1600.0, 604.0], [1700.0, 457.0], [1800.0, 283.0], [1900.0, 185.0], [2000.0, 114.0], [2100.0, 74.0], [2300.0, 40.0], [2200.0, 49.0], [2400.0, 24.0], [2500.0, 11.0], [2600.0, 14.0], [2800.0, 12.0], [2700.0, 14.0], [2900.0, 5.0], [3000.0, 5.0], [3100.0, 4.0], [200.0, 76.0], [3300.0, 3.0], [3200.0, 4.0], [3400.0, 2.0], [3500.0, 2.0], [3600.0, 1.0], [3700.0, 1.0], [3800.0, 1.0], [4400.0, 1.0], [300.0, 173.0], [400.0, 83.0], [500.0, 89.0]], "isOverall": false, "label": "GetRandomPhrase", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 20200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 527.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 6818.0, "series": [{"data": [[0.0, 527.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 6818.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2755.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 11.059829059829053, "minX": 1.59664362E12, "maxY": 99.49406415761568, "series": [{"data": [[1.59664368E12, 94.35660506502383], [1.59664374E12, 99.49406415761568], [1.59664362E12, 11.059829059829053], [1.5966438E12, 72.25716026812925]], "isOverall": false, "label": "Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5966438E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 31.0, "minX": 1.0, "maxY": 1615.2931034482756, "series": [{"data": [[3.0, 93.0], [4.0, 38.0], [5.0, 34.0], [6.0, 31.0], [7.0, 37.0], [8.0, 35.0], [9.0, 34.0], [10.0, 36.0], [11.0, 72.0], [12.0, 53.0], [13.0, 31.0], [14.0, 58.0], [15.0, 47.0], [16.0, 51.0], [17.0, 59.0], [18.0, 61.0], [19.0, 47.0], [20.0, 50.0], [21.0, 55.0], [22.0, 61.0], [23.0, 65.0], [24.0, 75.0], [25.0, 58.0], [26.0, 72.0], [27.0, 61.0], [28.0, 62.0], [29.0, 70.0], [30.0, 86.0], [31.0, 79.0], [33.0, 97.5], [34.0, 57.0], [35.0, 68.0], [36.0, 72.0], [37.0, 62.0], [38.0, 81.0], [40.0, 99.5], [41.0, 81.0], [43.0, 98.5], [44.0, 84.0], [45.0, 96.0], [47.0, 100.5], [49.0, 102.0], [50.0, 91.0], [51.0, 73.0], [53.0, 118.0], [54.0, 100.0], [55.0, 87.0], [57.0, 102.0], [58.0, 133.0], [59.0, 135.0], [60.0, 113.0], [62.0, 158.5], [63.0, 141.0], [64.0, 137.0], [65.0, 143.0], [66.0, 178.0], [67.0, 183.0], [68.0, 137.0], [69.0, 139.0], [70.0, 181.0], [71.0, 163.0], [73.0, 164.0], [74.0, 244.0], [75.0, 171.0], [76.0, 151.0], [77.0, 126.0], [78.0, 157.0], [79.0, 110.0], [80.0, 160.0], [82.0, 199.0], [84.0, 220.5], [86.0, 191.0], [88.0, 200.0], [89.0, 276.0], [90.0, 205.0], [91.0, 212.5], [93.0, 208.0], [94.0, 296.0], [95.0, 206.0], [96.0, 175.0], [98.0, 269.0], [100.0, 303.5]], "isOverall": false, "label": "Step1. Login", "isController": false}, {"data": [[51.219999999999985, 125.81999999999998]], "isOverall": false, "label": "Step1. Login-Aggregated", "isController": false}, {"data": [[2.0, 119.0], [3.0, 76.0], [4.0, 128.16666666666666], [5.0, 79.11111111111111], [6.0, 79.0], [7.0, 139.0], [8.0, 100.85714285714285], [9.0, 139.14285714285717], [10.0, 167.0], [11.0, 125.71428571428572], [12.0, 164.0], [13.0, 125.42857142857142], [14.0, 249.81818181818184], [15.0, 163.0], [16.0, 221.91666666666666], [17.0, 222.55555555555554], [18.0, 232.4], [19.0, 218.99999999999997], [20.0, 237.49999999999997], [21.0, 297.5714285714286], [22.0, 302.4444444444444], [23.0, 312.1111111111111], [24.0, 292.4], [25.0, 352.53333333333336], [26.0, 351.57142857142856], [27.0, 319.5], [28.0, 420.07142857142856], [29.0, 401.88888888888886], [30.0, 410.54545454545456], [31.0, 368.77777777777777], [32.0, 408.5714285714286], [33.0, 373.25], [34.0, 437.3888888888888], [35.0, 489.44444444444446], [36.0, 486.8125], [37.0, 492.99999999999994], [38.0, 522.1111111111111], [39.0, 560.8749999999999], [40.0, 562.7692307692308], [41.0, 522.8571428571429], [42.0, 589.5384615384615], [43.0, 598.7857142857143], [44.0, 545.5], [45.0, 646.5714285714286], [46.0, 642.7777777777778], [47.0, 677.1999999999999], [48.0, 650.0], [49.0, 658.5454545454545], [50.0, 644.0526315789475], [51.0, 679.2142857142858], [52.0, 649.3333333333333], [53.0, 717.0666666666668], [54.0, 715.5714285714286], [55.0, 760.1093749999997], [56.0, 789.6999999999999], [57.0, 815.5], [58.0, 779.52], [59.0, 840.0], [60.0, 831.0000000000001], [61.0, 829.6666666666667], [62.0, 848.0], [63.0, 865.5609756097562], [64.0, 1572.8571428571433], [65.0, 917.9999999999999], [66.0, 917.7272727272726], [67.0, 826.8333333333333], [68.0, 953.1290322580642], [69.0, 1012.25], [70.0, 973.9473684210526], [71.0, 914.2], [72.0, 983.5777777777777], [73.0, 1045.3999999999999], [74.0, 1032.2857142857142], [75.0, 1045.0476190476188], [76.0, 1032.3428571428572], [77.0, 1129.060606060606], [78.0, 1150.5862068965514], [79.0, 1080.4705882352941], [80.0, 1147.1111111111106], [81.0, 1154.793103448276], [82.0, 1133.897058823529], [83.0, 1195.1499999999999], [84.0, 1133.219512195122], [85.0, 1148.235294117647], [86.0, 1407.0526315789473], [87.0, 1240.5312499999998], [88.0, 1353.8939393939393], [89.0, 1197.8181818181818], [90.0, 1273.9444444444443], [91.0, 1345.9285714285716], [92.0, 1314.9771428571423], [93.0, 1258.265536723164], [94.0, 1573.8296943231437], [95.0, 1368.5853658536587], [96.0, 1615.2931034482756], [97.0, 1246.6808510638302], [98.0, 1379.9558823529412], [99.0, 1429.8447339848015], [100.0, 1439.9372811691233], [1.0, 373.0000000000001]], "isOverall": false, "label": "GetRandomPhrase", "isController": false}, {"data": [[92.22080000000008, 1333.5264999999988]], "isOverall": false, "label": "GetRandomPhrase-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 780.95, "minX": 1.59664362E12, "maxY": 243061.51666666666, "series": [{"data": [[1.59664368E12, 243061.51666666666], [1.59664374E12, 224142.53333333333], [1.59664362E12, 5398.7], [1.5966438E12, 97158.55]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.59664368E12, 30188.066666666666], [1.59664374E12, 27383.083333333332], [1.59664362E12, 780.95], [1.5966438E12, 11350.25]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5966438E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 53.111111111111114, "minX": 1.59664362E12, "maxY": 1505.8206617832786, "series": [{"data": [[1.59664368E12, 141.78048780487802], [1.59664362E12, 53.111111111111114]], "isOverall": false, "label": "Step1. Login", "isController": false}, {"data": [[1.59664368E12, 1298.8935131364801], [1.59664374E12, 1505.8206617832786], [1.59664362E12, 138.28282828282826], [1.5966438E12, 1080.7373552711774]], "isOverall": false, "label": "GetRandomPhrase", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5966438E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 52.611111111111114, "minX": 1.59664362E12, "maxY": 1505.808537509471, "series": [{"data": [[1.59664368E12, 141.7439024390244], [1.59664362E12, 52.611111111111114]], "isOverall": false, "label": "Step1. Login", "isController": false}, {"data": [[1.59664368E12, 1298.873285282491], [1.59664374E12, 1505.808537509471], [1.59664362E12, 138.23232323232313], [1.5966438E12, 1080.7172455819616]], "isOverall": false, "label": "GetRandomPhrase", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5966438E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.59664362E12, "maxY": 8.333333333333334, "series": [{"data": [[1.59664368E12, 0.6341463414634144], [1.59664362E12, 8.333333333333334]], "isOverall": false, "label": "Step1. Login", "isController": false}, {"data": [[1.59664368E12, 0.0], [1.59664374E12, 0.016165698408689155], [1.59664362E12, 0.0], [1.5966438E12, 0.03534430225472275]], "isOverall": false, "label": "GetRandomPhrase", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5966438E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 31.0, "minX": 1.59664362E12, "maxY": 20284.0, "series": [{"data": [[1.59664368E12, 19401.0], [1.59664374E12, 20284.0], [1.59664362E12, 330.0], [1.5966438E12, 19330.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.59664368E12, 115.8239958190918], [1.59664374E12, 925.1199924468995], [1.59664362E12, 31.0], [1.5966438E12, 238.7779996085167]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.59664368E12, 128.81120292663576], [1.59664374E12, 932.6120011329651], [1.59664362E12, 31.0], [1.5966438E12, 255.83700234889986]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.59664368E12, 118.64799947738646], [1.59664374E12, 931.6199995279312], [1.59664362E12, 31.0], [1.5966438E12, 246.7869974553585]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.59664368E12, 47.0], [1.59664374E12, 758.0], [1.59664362E12, 31.0], [1.5966438E12, 61.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.59664368E12, 1296.0], [1.59664374E12, 1430.0], [1.59664362E12, 114.0], [1.5966438E12, 1084.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5966438E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 64.0, "minX": 3.0, "maxY": 2774.0, "series": [{"data": [[32.0, 2479.5], [36.0, 271.0], [39.0, 64.0], [43.0, 2774.0], [45.0, 1550.0], [44.0, 1852.5], [49.0, 1627.0], [3.0, 330.0], [51.0, 1492.0], [53.0, 1525.0], [54.0, 1553.5], [55.0, 1538.0], [57.0, 1562.0], [59.0, 1512.0], [58.0, 1559.5], [61.0, 1383.0], [60.0, 1352.5], [63.0, 1408.0], [62.0, 1782.5], [66.0, 1353.5], [67.0, 1386.5], [65.0, 1339.0], [64.0, 1510.0], [4.0, 308.5], [69.0, 1384.0], [71.0, 1378.0], [70.0, 1319.5], [68.0, 1363.0], [72.0, 1357.5], [74.0, 1245.5], [73.0, 1324.0], [75.0, 1282.5], [78.0, 1221.0], [76.0, 1185.5], [79.0, 1173.0], [77.0, 1246.0], [82.0, 1340.5], [80.0, 1282.0], [83.0, 1335.5], [81.0, 1143.0], [85.0, 820.5], [87.0, 1329.0], [86.0, 1323.5], [84.0, 1056.0], [28.0, 1808.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 87.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 64.0, "minX": 3.0, "maxY": 2774.0, "series": [{"data": [[32.0, 2479.5], [36.0, 271.0], [39.0, 64.0], [43.0, 2774.0], [45.0, 1550.0], [44.0, 1852.0], [49.0, 1627.0], [3.0, 330.0], [51.0, 1492.0], [53.0, 1525.0], [54.0, 1553.5], [55.0, 1538.0], [57.0, 1562.0], [59.0, 1512.0], [58.0, 1559.5], [61.0, 1383.0], [60.0, 1352.5], [63.0, 1408.0], [62.0, 1782.5], [66.0, 1353.5], [67.0, 1386.5], [65.0, 1339.0], [64.0, 1510.0], [4.0, 308.5], [69.0, 1384.0], [71.0, 1378.0], [70.0, 1319.5], [68.0, 1363.0], [72.0, 1357.5], [74.0, 1245.5], [73.0, 1324.0], [75.0, 1282.5], [78.0, 1221.0], [76.0, 1185.5], [79.0, 1173.0], [77.0, 1246.0], [82.0, 1340.5], [80.0, 1282.0], [83.0, 1335.5], [81.0, 1143.0], [85.0, 820.5], [87.0, 1329.0], [86.0, 1323.5], [84.0, 1056.0], [28.0, 1808.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 87.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 2.25, "minX": 1.59664362E12, "maxY": 74.41666666666667, "series": [{"data": [[1.59664368E12, 74.41666666666667], [1.59664374E12, 65.88333333333334], [1.59664362E12, 2.25], [1.5966438E12, 25.783333333333335]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5966438E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.95, "minX": 1.59664362E12, "maxY": 73.05, "series": [{"data": [[1.59664368E12, 73.05], [1.59664374E12, 65.98333333333333], [1.59664362E12, 1.95], [1.5966438E12, 27.35]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5966438E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.3, "minX": 1.59664362E12, "maxY": 71.68333333333334, "series": [{"data": [[1.59664368E12, 1.3666666666666667], [1.59664362E12, 0.3]], "isOverall": false, "label": "Step1. Login-success", "isController": false}, {"data": [[1.59664368E12, 71.68333333333334], [1.59664374E12, 65.98333333333333], [1.59664362E12, 1.65], [1.5966438E12, 27.35]], "isOverall": false, "label": "GetRandomPhrase-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5966438E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.95, "minX": 1.59664362E12, "maxY": 73.05, "series": [{"data": [[1.59664368E12, 73.05], [1.59664374E12, 65.98333333333333], [1.59664362E12, 1.95], [1.5966438E12, 27.35]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5966438E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

