/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 14.0, "minX": 0.0, "maxY": 14084.0, "series": [{"data": [[0.0, 14.0], [0.1, 14.0], [0.2, 14.0], [0.3, 14.0], [0.4, 14.0], [0.5, 14.0], [0.6, 14.0], [0.7, 14.0], [0.8, 14.0], [0.9, 14.0], [1.0, 15.0], [1.1, 15.0], [1.2, 15.0], [1.3, 15.0], [1.4, 15.0], [1.5, 15.0], [1.6, 15.0], [1.7, 15.0], [1.8, 15.0], [1.9, 15.0], [2.0, 16.0], [2.1, 16.0], [2.2, 16.0], [2.3, 16.0], [2.4, 16.0], [2.5, 16.0], [2.6, 16.0], [2.7, 16.0], [2.8, 16.0], [2.9, 16.0], [3.0, 16.0], [3.1, 16.0], [3.2, 16.0], [3.3, 16.0], [3.4, 16.0], [3.5, 16.0], [3.6, 16.0], [3.7, 16.0], [3.8, 16.0], [3.9, 16.0], [4.0, 17.0], [4.1, 17.0], [4.2, 17.0], [4.3, 17.0], [4.4, 17.0], [4.5, 17.0], [4.6, 17.0], [4.7, 17.0], [4.8, 17.0], [4.9, 17.0], [5.0, 18.0], [5.1, 18.0], [5.2, 18.0], [5.3, 18.0], [5.4, 18.0], [5.5, 18.0], [5.6, 18.0], [5.7, 18.0], [5.8, 18.0], [5.9, 18.0], [6.0, 19.0], [6.1, 19.0], [6.2, 19.0], [6.3, 19.0], [6.4, 19.0], [6.5, 19.0], [6.6, 19.0], [6.7, 19.0], [6.8, 19.0], [6.9, 19.0], [7.0, 19.0], [7.1, 19.0], [7.2, 19.0], [7.3, 19.0], [7.4, 19.0], [7.5, 19.0], [7.6, 19.0], [7.7, 19.0], [7.8, 19.0], [7.9, 19.0], [8.0, 19.0], [8.1, 19.0], [8.2, 19.0], [8.3, 19.0], [8.4, 19.0], [8.5, 19.0], [8.6, 19.0], [8.7, 19.0], [8.8, 19.0], [8.9, 19.0], [9.0, 20.0], [9.1, 20.0], [9.2, 20.0], [9.3, 20.0], [9.4, 20.0], [9.5, 20.0], [9.6, 20.0], [9.7, 20.0], [9.8, 20.0], [9.9, 20.0], [10.0, 20.0], [10.1, 20.0], [10.2, 20.0], [10.3, 20.0], [10.4, 20.0], [10.5, 20.0], [10.6, 20.0], [10.7, 20.0], [10.8, 20.0], [10.9, 20.0], [11.0, 20.0], [11.1, 20.0], [11.2, 20.0], [11.3, 20.0], [11.4, 20.0], [11.5, 20.0], [11.6, 20.0], [11.7, 20.0], [11.8, 20.0], [11.9, 20.0], [12.0, 21.0], [12.1, 21.0], [12.2, 21.0], [12.3, 21.0], [12.4, 21.0], [12.5, 21.0], [12.6, 21.0], [12.7, 21.0], [12.8, 21.0], [12.9, 21.0], [13.0, 21.0], [13.1, 21.0], [13.2, 21.0], [13.3, 21.0], [13.4, 21.0], [13.5, 21.0], [13.6, 21.0], [13.7, 21.0], [13.8, 21.0], [13.9, 21.0], [14.0, 22.0], [14.1, 22.0], [14.2, 22.0], [14.3, 22.0], [14.4, 22.0], [14.5, 22.0], [14.6, 22.0], [14.7, 22.0], [14.8, 22.0], [14.9, 22.0], [15.0, 22.0], [15.1, 22.0], [15.2, 22.0], [15.3, 22.0], [15.4, 22.0], [15.5, 22.0], [15.6, 22.0], [15.7, 22.0], [15.8, 22.0], [15.9, 22.0], [16.0, 23.0], [16.1, 23.0], [16.2, 23.0], [16.3, 23.0], [16.4, 23.0], [16.5, 23.0], [16.6, 23.0], [16.7, 23.0], [16.8, 23.0], [16.9, 23.0], [17.0, 25.0], [17.1, 25.0], [17.2, 25.0], [17.3, 25.0], [17.4, 25.0], [17.5, 25.0], [17.6, 25.0], [17.7, 25.0], [17.8, 25.0], [17.9, 25.0], [18.0, 25.0], [18.1, 25.0], [18.2, 25.0], [18.3, 25.0], [18.4, 25.0], [18.5, 25.0], [18.6, 25.0], [18.7, 25.0], [18.8, 25.0], [18.9, 25.0], [19.0, 27.0], [19.1, 27.0], [19.2, 27.0], [19.3, 27.0], [19.4, 27.0], [19.5, 27.0], [19.6, 27.0], [19.7, 27.0], [19.8, 27.0], [19.9, 27.0], [20.0, 27.0], [20.1, 27.0], [20.2, 27.0], [20.3, 27.0], [20.4, 27.0], [20.5, 27.0], [20.6, 27.0], [20.7, 27.0], [20.8, 27.0], [20.9, 27.0], [21.0, 27.0], [21.1, 27.0], [21.2, 27.0], [21.3, 27.0], [21.4, 27.0], [21.5, 27.0], [21.6, 27.0], [21.7, 27.0], [21.8, 27.0], [21.9, 27.0], [22.0, 28.0], [22.1, 28.0], [22.2, 28.0], [22.3, 28.0], [22.4, 28.0], [22.5, 28.0], [22.6, 28.0], [22.7, 28.0], [22.8, 28.0], [22.9, 28.0], [23.0, 28.0], [23.1, 28.0], [23.2, 28.0], [23.3, 28.0], [23.4, 28.0], [23.5, 28.0], [23.6, 28.0], [23.7, 28.0], [23.8, 28.0], [23.9, 28.0], [24.0, 28.0], [24.1, 28.0], [24.2, 28.0], [24.3, 28.0], [24.4, 28.0], [24.5, 28.0], [24.6, 28.0], [24.7, 28.0], [24.8, 28.0], [24.9, 28.0], [25.0, 29.0], [25.1, 29.0], [25.2, 29.0], [25.3, 29.0], [25.4, 29.0], [25.5, 29.0], [25.6, 29.0], [25.7, 29.0], [25.8, 29.0], [25.9, 29.0], [26.0, 29.0], [26.1, 29.0], [26.2, 29.0], [26.3, 29.0], [26.4, 29.0], [26.5, 29.0], [26.6, 29.0], [26.7, 29.0], [26.8, 29.0], [26.9, 29.0], [27.0, 30.0], [27.1, 30.0], [27.2, 30.0], [27.3, 30.0], [27.4, 30.0], [27.5, 30.0], [27.6, 30.0], [27.7, 30.0], [27.8, 30.0], [27.9, 30.0], [28.0, 31.0], [28.1, 31.0], [28.2, 31.0], [28.3, 31.0], [28.4, 31.0], [28.5, 31.0], [28.6, 31.0], [28.7, 31.0], [28.8, 31.0], [28.9, 31.0], [29.0, 31.0], [29.1, 31.0], [29.2, 31.0], [29.3, 31.0], [29.4, 31.0], [29.5, 31.0], [29.6, 31.0], [29.7, 31.0], [29.8, 31.0], [29.9, 31.0], [30.0, 32.0], [30.1, 32.0], [30.2, 32.0], [30.3, 32.0], [30.4, 32.0], [30.5, 32.0], [30.6, 32.0], [30.7, 32.0], [30.8, 32.0], [30.9, 32.0], [31.0, 33.0], [31.1, 33.0], [31.2, 33.0], [31.3, 33.0], [31.4, 33.0], [31.5, 33.0], [31.6, 33.0], [31.7, 33.0], [31.8, 33.0], [31.9, 33.0], [32.0, 33.0], [32.1, 33.0], [32.2, 33.0], [32.3, 33.0], [32.4, 33.0], [32.5, 33.0], [32.6, 33.0], [32.7, 33.0], [32.8, 33.0], [32.9, 33.0], [33.0, 33.0], [33.1, 33.0], [33.2, 33.0], [33.3, 33.0], [33.4, 33.0], [33.5, 33.0], [33.6, 33.0], [33.7, 33.0], [33.8, 33.0], [33.9, 33.0], [34.0, 33.0], [34.1, 33.0], [34.2, 33.0], [34.3, 33.0], [34.4, 33.0], [34.5, 33.0], [34.6, 33.0], [34.7, 33.0], [34.8, 33.0], [34.9, 33.0], [35.0, 36.0], [35.1, 36.0], [35.2, 36.0], [35.3, 36.0], [35.4, 36.0], [35.5, 36.0], [35.6, 36.0], [35.7, 36.0], [35.8, 36.0], [35.9, 36.0], [36.0, 36.0], [36.1, 36.0], [36.2, 36.0], [36.3, 36.0], [36.4, 36.0], [36.5, 36.0], [36.6, 36.0], [36.7, 36.0], [36.8, 36.0], [36.9, 36.0], [37.0, 38.0], [37.1, 38.0], [37.2, 38.0], [37.3, 38.0], [37.4, 38.0], [37.5, 38.0], [37.6, 38.0], [37.7, 38.0], [37.8, 38.0], [37.9, 38.0], [38.0, 38.0], [38.1, 38.0], [38.2, 38.0], [38.3, 38.0], [38.4, 38.0], [38.5, 38.0], [38.6, 38.0], [38.7, 38.0], [38.8, 38.0], [38.9, 38.0], [39.0, 38.0], [39.1, 38.0], [39.2, 38.0], [39.3, 38.0], [39.4, 38.0], [39.5, 38.0], [39.6, 38.0], [39.7, 38.0], [39.8, 38.0], [39.9, 38.0], [40.0, 39.0], [40.1, 39.0], [40.2, 39.0], [40.3, 39.0], [40.4, 39.0], [40.5, 39.0], [40.6, 39.0], [40.7, 39.0], [40.8, 39.0], [40.9, 39.0], [41.0, 39.0], [41.1, 39.0], [41.2, 39.0], [41.3, 39.0], [41.4, 39.0], [41.5, 39.0], [41.6, 39.0], [41.7, 39.0], [41.8, 39.0], [41.9, 39.0], [42.0, 41.0], [42.1, 41.0], [42.2, 41.0], [42.3, 41.0], [42.4, 41.0], [42.5, 41.0], [42.6, 41.0], [42.7, 41.0], [42.8, 41.0], [42.9, 41.0], [43.0, 41.0], [43.1, 41.0], [43.2, 41.0], [43.3, 41.0], [43.4, 41.0], [43.5, 41.0], [43.6, 41.0], [43.7, 41.0], [43.8, 41.0], [43.9, 41.0], [44.0, 44.0], [44.1, 44.0], [44.2, 44.0], [44.3, 44.0], [44.4, 44.0], [44.5, 44.0], [44.6, 44.0], [44.7, 44.0], [44.8, 44.0], [44.9, 44.0], [45.0, 44.0], [45.1, 44.0], [45.2, 44.0], [45.3, 44.0], [45.4, 44.0], [45.5, 44.0], [45.6, 44.0], [45.7, 44.0], [45.8, 44.0], [45.9, 44.0], [46.0, 44.0], [46.1, 44.0], [46.2, 44.0], [46.3, 44.0], [46.4, 44.0], [46.5, 44.0], [46.6, 44.0], [46.7, 44.0], [46.8, 44.0], [46.9, 44.0], [47.0, 44.0], [47.1, 44.0], [47.2, 44.0], [47.3, 44.0], [47.4, 44.0], [47.5, 44.0], [47.6, 44.0], [47.7, 44.0], [47.8, 44.0], [47.9, 44.0], [48.0, 45.0], [48.1, 45.0], [48.2, 45.0], [48.3, 45.0], [48.4, 45.0], [48.5, 45.0], [48.6, 45.0], [48.7, 45.0], [48.8, 45.0], [48.9, 45.0], [49.0, 46.0], [49.1, 46.0], [49.2, 46.0], [49.3, 46.0], [49.4, 46.0], [49.5, 46.0], [49.6, 46.0], [49.7, 46.0], [49.8, 46.0], [49.9, 46.0], [50.0, 46.0], [50.1, 46.0], [50.2, 46.0], [50.3, 46.0], [50.4, 46.0], [50.5, 46.0], [50.6, 46.0], [50.7, 46.0], [50.8, 46.0], [50.9, 46.0], [51.0, 47.0], [51.1, 47.0], [51.2, 47.0], [51.3, 47.0], [51.4, 47.0], [51.5, 47.0], [51.6, 47.0], [51.7, 47.0], [51.8, 47.0], [51.9, 47.0], [52.0, 47.0], [52.1, 47.0], [52.2, 47.0], [52.3, 47.0], [52.4, 47.0], [52.5, 47.0], [52.6, 47.0], [52.7, 47.0], [52.8, 47.0], [52.9, 47.0], [53.0, 49.0], [53.1, 49.0], [53.2, 49.0], [53.3, 49.0], [53.4, 49.0], [53.5, 49.0], [53.6, 49.0], [53.7, 49.0], [53.8, 49.0], [53.9, 49.0], [54.0, 53.0], [54.1, 53.0], [54.2, 53.0], [54.3, 53.0], [54.4, 53.0], [54.5, 53.0], [54.6, 53.0], [54.7, 53.0], [54.8, 53.0], [54.9, 53.0], [55.0, 53.0], [55.1, 53.0], [55.2, 53.0], [55.3, 53.0], [55.4, 53.0], [55.5, 53.0], [55.6, 53.0], [55.7, 53.0], [55.8, 53.0], [55.9, 53.0], [56.0, 53.0], [56.1, 53.0], [56.2, 53.0], [56.3, 53.0], [56.4, 53.0], [56.5, 53.0], [56.6, 53.0], [56.7, 53.0], [56.8, 53.0], [56.9, 53.0], [57.0, 55.0], [57.1, 55.0], [57.2, 55.0], [57.3, 55.0], [57.4, 55.0], [57.5, 55.0], [57.6, 55.0], [57.7, 55.0], [57.8, 55.0], [57.9, 55.0], [58.0, 55.0], [58.1, 55.0], [58.2, 55.0], [58.3, 55.0], [58.4, 55.0], [58.5, 55.0], [58.6, 55.0], [58.7, 55.0], [58.8, 55.0], [58.9, 55.0], [59.0, 55.0], [59.1, 55.0], [59.2, 55.0], [59.3, 55.0], [59.4, 55.0], [59.5, 55.0], [59.6, 55.0], [59.7, 55.0], [59.8, 55.0], [59.9, 55.0], [60.0, 55.0], [60.1, 55.0], [60.2, 55.0], [60.3, 55.0], [60.4, 55.0], [60.5, 55.0], [60.6, 55.0], [60.7, 55.0], [60.8, 55.0], [60.9, 55.0], [61.0, 56.0], [61.1, 56.0], [61.2, 56.0], [61.3, 56.0], [61.4, 56.0], [61.5, 56.0], [61.6, 56.0], [61.7, 56.0], [61.8, 56.0], [61.9, 56.0], [62.0, 57.0], [62.1, 57.0], [62.2, 57.0], [62.3, 57.0], [62.4, 57.0], [62.5, 57.0], [62.6, 57.0], [62.7, 57.0], [62.8, 57.0], [62.9, 57.0], [63.0, 59.0], [63.1, 59.0], [63.2, 59.0], [63.3, 59.0], [63.4, 59.0], [63.5, 59.0], [63.6, 59.0], [63.7, 59.0], [63.8, 59.0], [63.9, 59.0], [64.0, 60.0], [64.1, 60.0], [64.2, 60.0], [64.3, 60.0], [64.4, 60.0], [64.5, 60.0], [64.6, 60.0], [64.7, 60.0], [64.8, 60.0], [64.9, 60.0], [65.0, 61.0], [65.1, 61.0], [65.2, 61.0], [65.3, 61.0], [65.4, 61.0], [65.5, 61.0], [65.6, 61.0], [65.7, 61.0], [65.8, 61.0], [65.9, 61.0], [66.0, 61.0], [66.1, 61.0], [66.2, 61.0], [66.3, 61.0], [66.4, 61.0], [66.5, 61.0], [66.6, 61.0], [66.7, 61.0], [66.8, 61.0], [66.9, 61.0], [67.0, 62.0], [67.1, 62.0], [67.2, 62.0], [67.3, 62.0], [67.4, 62.0], [67.5, 62.0], [67.6, 62.0], [67.7, 62.0], [67.8, 62.0], [67.9, 62.0], [68.0, 63.0], [68.1, 63.0], [68.2, 63.0], [68.3, 63.0], [68.4, 63.0], [68.5, 63.0], [68.6, 63.0], [68.7, 63.0], [68.8, 63.0], [68.9, 63.0], [69.0, 65.0], [69.1, 65.0], [69.2, 65.0], [69.3, 65.0], [69.4, 65.0], [69.5, 65.0], [69.6, 65.0], [69.7, 65.0], [69.8, 65.0], [69.9, 65.0], [70.0, 67.0], [70.1, 67.0], [70.2, 67.0], [70.3, 67.0], [70.4, 67.0], [70.5, 67.0], [70.6, 67.0], [70.7, 67.0], [70.8, 67.0], [70.9, 67.0], [71.0, 68.0], [71.1, 68.0], [71.2, 68.0], [71.3, 68.0], [71.4, 68.0], [71.5, 68.0], [71.6, 68.0], [71.7, 68.0], [71.8, 68.0], [71.9, 68.0], [72.0, 69.0], [72.1, 69.0], [72.2, 69.0], [72.3, 69.0], [72.4, 69.0], [72.5, 69.0], [72.6, 69.0], [72.7, 69.0], [72.8, 69.0], [72.9, 69.0], [73.0, 69.0], [73.1, 69.0], [73.2, 69.0], [73.3, 69.0], [73.4, 69.0], [73.5, 69.0], [73.6, 69.0], [73.7, 69.0], [73.8, 69.0], [73.9, 69.0], [74.0, 69.0], [74.1, 69.0], [74.2, 69.0], [74.3, 69.0], [74.4, 69.0], [74.5, 69.0], [74.6, 69.0], [74.7, 69.0], [74.8, 69.0], [74.9, 69.0], [75.0, 72.0], [75.1, 72.0], [75.2, 72.0], [75.3, 72.0], [75.4, 72.0], [75.5, 72.0], [75.6, 72.0], [75.7, 72.0], [75.8, 72.0], [75.9, 72.0], [76.0, 72.0], [76.1, 72.0], [76.2, 72.0], [76.3, 72.0], [76.4, 72.0], [76.5, 72.0], [76.6, 72.0], [76.7, 72.0], [76.8, 72.0], [76.9, 72.0], [77.0, 72.0], [77.1, 72.0], [77.2, 72.0], [77.3, 72.0], [77.4, 72.0], [77.5, 72.0], [77.6, 72.0], [77.7, 72.0], [77.8, 72.0], [77.9, 72.0], [78.0, 74.0], [78.1, 74.0], [78.2, 74.0], [78.3, 74.0], [78.4, 74.0], [78.5, 74.0], [78.6, 74.0], [78.7, 74.0], [78.8, 74.0], [78.9, 74.0], [79.0, 76.0], [79.1, 76.0], [79.2, 76.0], [79.3, 76.0], [79.4, 76.0], [79.5, 76.0], [79.6, 76.0], [79.7, 76.0], [79.8, 76.0], [79.9, 76.0], [80.0, 76.0], [80.1, 76.0], [80.2, 76.0], [80.3, 76.0], [80.4, 76.0], [80.5, 76.0], [80.6, 76.0], [80.7, 76.0], [80.8, 76.0], [80.9, 76.0], [81.0, 77.0], [81.1, 77.0], [81.2, 77.0], [81.3, 77.0], [81.4, 77.0], [81.5, 77.0], [81.6, 77.0], [81.7, 77.0], [81.8, 77.0], [81.9, 77.0], [82.0, 78.0], [82.1, 78.0], [82.2, 78.0], [82.3, 78.0], [82.4, 78.0], [82.5, 78.0], [82.6, 78.0], [82.7, 78.0], [82.8, 78.0], [82.9, 78.0], [83.0, 82.0], [83.1, 82.0], [83.2, 82.0], [83.3, 82.0], [83.4, 82.0], [83.5, 82.0], [83.6, 82.0], [83.7, 82.0], [83.8, 82.0], [83.9, 82.0], [84.0, 85.0], [84.1, 85.0], [84.2, 85.0], [84.3, 85.0], [84.4, 85.0], [84.5, 85.0], [84.6, 85.0], [84.7, 85.0], [84.8, 85.0], [84.9, 85.0], [85.0, 86.0], [85.1, 86.0], [85.2, 86.0], [85.3, 86.0], [85.4, 86.0], [85.5, 86.0], [85.6, 86.0], [85.7, 86.0], [85.8, 86.0], [85.9, 86.0], [86.0, 106.0], [86.1, 106.0], [86.2, 106.0], [86.3, 106.0], [86.4, 106.0], [86.5, 106.0], [86.6, 106.0], [86.7, 106.0], [86.8, 106.0], [86.9, 106.0], [87.0, 126.0], [87.1, 126.0], [87.2, 126.0], [87.3, 126.0], [87.4, 126.0], [87.5, 126.0], [87.6, 126.0], [87.7, 126.0], [87.8, 126.0], [87.9, 126.0], [88.0, 160.0], [88.1, 160.0], [88.2, 160.0], [88.3, 160.0], [88.4, 160.0], [88.5, 160.0], [88.6, 160.0], [88.7, 160.0], [88.8, 160.0], [88.9, 160.0], [89.0, 345.0], [89.1, 345.0], [89.2, 345.0], [89.3, 345.0], [89.4, 345.0], [89.5, 345.0], [89.6, 345.0], [89.7, 345.0], [89.8, 345.0], [89.9, 345.0], [90.0, 537.0], [90.1, 537.0], [90.2, 537.0], [90.3, 537.0], [90.4, 537.0], [90.5, 537.0], [90.6, 537.0], [90.7, 537.0], [90.8, 537.0], [90.9, 537.0], [91.0, 1070.0], [91.1, 1070.0], [91.2, 1070.0], [91.3, 1070.0], [91.4, 1070.0], [91.5, 1070.0], [91.6, 1070.0], [91.7, 1070.0], [91.8, 1070.0], [91.9, 1070.0], [92.0, 1304.0], [92.1, 1304.0], [92.2, 1304.0], [92.3, 1304.0], [92.4, 1304.0], [92.5, 1304.0], [92.6, 1304.0], [92.7, 1304.0], [92.8, 1304.0], [92.9, 1304.0], [93.0, 1459.0], [93.1, 1459.0], [93.2, 1459.0], [93.3, 1459.0], [93.4, 1459.0], [93.5, 1459.0], [93.6, 1459.0], [93.7, 1459.0], [93.8, 1459.0], [93.9, 1459.0], [94.0, 1612.0], [94.1, 1612.0], [94.2, 1612.0], [94.3, 1612.0], [94.4, 1612.0], [94.5, 1612.0], [94.6, 1612.0], [94.7, 1612.0], [94.8, 1612.0], [94.9, 1612.0], [95.0, 1756.0], [95.1, 1756.0], [95.2, 1756.0], [95.3, 1756.0], [95.4, 1756.0], [95.5, 1756.0], [95.6, 1756.0], [95.7, 1756.0], [95.8, 1756.0], [95.9, 1756.0], [96.0, 1777.0], [96.1, 1777.0], [96.2, 1777.0], [96.3, 1777.0], [96.4, 1777.0], [96.5, 1777.0], [96.6, 1777.0], [96.7, 1777.0], [96.8, 1777.0], [96.9, 1777.0], [97.0, 1923.0], [97.1, 1923.0], [97.2, 1923.0], [97.3, 1923.0], [97.4, 1923.0], [97.5, 1923.0], [97.6, 1923.0], [97.7, 1923.0], [97.8, 1923.0], [97.9, 1923.0], [98.0, 1962.0], [98.1, 1962.0], [98.2, 1962.0], [98.3, 1962.0], [98.4, 1962.0], [98.5, 1962.0], [98.6, 1962.0], [98.7, 1962.0], [98.8, 1962.0], [98.9, 1962.0], [99.0, 2369.0], [99.1, 2369.0], [99.2, 2369.0], [99.3, 2369.0], [99.4, 2369.0], [99.5, 2369.0], [99.6, 2369.0], [99.7, 2369.0], [99.8, 2369.0], [99.9, 2369.0]], "isOverall": false, "label": "Step1. Login", "isController": false}, {"data": [[0.0, 14.0], [0.1, 22.0], [0.2, 26.0], [0.3, 30.0], [0.4, 34.0], [0.5, 39.0], [0.6, 44.0], [0.7, 47.0], [0.8, 49.0], [0.9, 53.0], [1.0, 59.0], [1.1, 63.0], [1.2, 65.0], [1.3, 70.0], [1.4, 72.0], [1.5, 76.0], [1.6, 79.0], [1.7, 84.0], [1.8, 90.0], [1.9, 92.0], [2.0, 96.0], [2.1, 99.0], [2.2, 101.0], [2.3, 107.0], [2.4, 111.0], [2.5, 114.0], [2.6, 116.0], [2.7, 118.0], [2.8, 122.0], [2.9, 129.0], [3.0, 132.0], [3.1, 137.0], [3.2, 142.0], [3.3, 144.0], [3.4, 148.0], [3.5, 151.0], [3.6, 154.0], [3.7, 155.0], [3.8, 156.0], [3.9, 158.0], [4.0, 160.0], [4.1, 161.0], [4.2, 162.0], [4.3, 163.0], [4.4, 164.0], [4.5, 165.0], [4.6, 167.0], [4.7, 168.0], [4.8, 170.0], [4.9, 173.0], [5.0, 175.0], [5.1, 177.0], [5.2, 179.0], [5.3, 182.0], [5.4, 184.0], [5.5, 186.0], [5.6, 190.0], [5.7, 193.0], [5.8, 195.0], [5.9, 198.0], [6.0, 202.0], [6.1, 207.0], [6.2, 211.0], [6.3, 214.0], [6.4, 218.0], [6.5, 222.0], [6.6, 227.0], [6.7, 231.0], [6.8, 236.0], [6.9, 243.0], [7.0, 250.0], [7.1, 253.0], [7.2, 256.0], [7.3, 262.0], [7.4, 265.0], [7.5, 270.0], [7.6, 273.0], [7.7, 276.0], [7.8, 280.0], [7.9, 284.0], [8.0, 286.0], [8.1, 290.0], [8.2, 295.0], [8.3, 298.0], [8.4, 301.0], [8.5, 305.0], [8.6, 309.0], [8.7, 314.0], [8.8, 318.0], [8.9, 323.0], [9.0, 327.0], [9.1, 329.0], [9.2, 333.0], [9.3, 335.0], [9.4, 338.0], [9.5, 343.0], [9.6, 348.0], [9.7, 351.0], [9.8, 355.0], [9.9, 359.0], [10.0, 360.0], [10.1, 363.0], [10.2, 366.0], [10.3, 369.0], [10.4, 370.0], [10.5, 372.0], [10.6, 376.0], [10.7, 379.0], [10.8, 381.0], [10.9, 384.0], [11.0, 386.0], [11.1, 389.0], [11.2, 392.0], [11.3, 394.0], [11.4, 397.0], [11.5, 399.0], [11.6, 402.0], [11.7, 404.0], [11.8, 406.0], [11.9, 408.0], [12.0, 410.0], [12.1, 413.0], [12.2, 414.0], [12.3, 416.0], [12.4, 418.0], [12.5, 422.0], [12.6, 425.0], [12.7, 426.0], [12.8, 428.0], [12.9, 431.0], [13.0, 433.0], [13.1, 435.0], [13.2, 437.0], [13.3, 439.0], [13.4, 444.0], [13.5, 447.0], [13.6, 449.0], [13.7, 451.0], [13.8, 452.0], [13.9, 454.0], [14.0, 457.0], [14.1, 460.0], [14.2, 461.0], [14.3, 464.0], [14.4, 468.0], [14.5, 469.0], [14.6, 472.0], [14.7, 474.0], [14.8, 476.0], [14.9, 479.0], [15.0, 482.0], [15.1, 483.0], [15.2, 484.0], [15.3, 486.0], [15.4, 488.0], [15.5, 489.0], [15.6, 491.0], [15.7, 493.0], [15.8, 494.0], [15.9, 498.0], [16.0, 499.0], [16.1, 504.0], [16.2, 506.0], [16.3, 509.0], [16.4, 512.0], [16.5, 515.0], [16.6, 517.0], [16.7, 519.0], [16.8, 523.0], [16.9, 525.0], [17.0, 527.0], [17.1, 530.0], [17.2, 531.0], [17.3, 534.0], [17.4, 536.0], [17.5, 537.0], [17.6, 539.0], [17.7, 541.0], [17.8, 543.0], [17.9, 545.0], [18.0, 547.0], [18.1, 549.0], [18.2, 553.0], [18.3, 554.0], [18.4, 556.0], [18.5, 557.0], [18.6, 559.0], [18.7, 560.0], [18.8, 562.0], [18.9, 563.0], [19.0, 565.0], [19.1, 566.0], [19.2, 569.0], [19.3, 570.0], [19.4, 573.0], [19.5, 574.0], [19.6, 576.0], [19.7, 578.0], [19.8, 580.0], [19.9, 581.0], [20.0, 583.0], [20.1, 584.0], [20.2, 586.0], [20.3, 587.0], [20.4, 588.0], [20.5, 589.0], [20.6, 590.0], [20.7, 591.0], [20.8, 592.0], [20.9, 593.0], [21.0, 595.0], [21.1, 598.0], [21.2, 600.0], [21.3, 601.0], [21.4, 602.0], [21.5, 603.0], [21.6, 606.0], [21.7, 607.0], [21.8, 608.0], [21.9, 610.0], [22.0, 612.0], [22.1, 612.0], [22.2, 614.0], [22.3, 615.0], [22.4, 616.0], [22.5, 617.0], [22.6, 619.0], [22.7, 620.0], [22.8, 621.0], [22.9, 622.0], [23.0, 623.0], [23.1, 624.0], [23.2, 625.0], [23.3, 627.0], [23.4, 628.0], [23.5, 629.0], [23.6, 631.0], [23.7, 632.0], [23.8, 633.0], [23.9, 634.0], [24.0, 636.0], [24.1, 637.0], [24.2, 639.0], [24.3, 641.0], [24.4, 642.0], [24.5, 643.0], [24.6, 645.0], [24.7, 646.0], [24.8, 648.0], [24.9, 649.0], [25.0, 651.0], [25.1, 653.0], [25.2, 654.0], [25.3, 656.0], [25.4, 657.0], [25.5, 658.0], [25.6, 659.0], [25.7, 660.0], [25.8, 661.0], [25.9, 663.0], [26.0, 665.0], [26.1, 666.0], [26.2, 666.0], [26.3, 667.0], [26.4, 668.0], [26.5, 669.0], [26.6, 670.0], [26.7, 671.0], [26.8, 671.0], [26.9, 672.0], [27.0, 673.0], [27.1, 674.0], [27.2, 675.0], [27.3, 676.0], [27.4, 677.0], [27.5, 678.0], [27.6, 679.0], [27.7, 681.0], [27.8, 681.0], [27.9, 683.0], [28.0, 684.0], [28.1, 685.0], [28.2, 686.0], [28.3, 686.0], [28.4, 687.0], [28.5, 688.0], [28.6, 689.0], [28.7, 690.0], [28.8, 691.0], [28.9, 692.0], [29.0, 693.0], [29.1, 694.0], [29.2, 695.0], [29.3, 697.0], [29.4, 697.0], [29.5, 698.0], [29.6, 699.0], [29.7, 700.0], [29.8, 701.0], [29.9, 702.0], [30.0, 703.0], [30.1, 704.0], [30.2, 705.0], [30.3, 706.0], [30.4, 706.0], [30.5, 707.0], [30.6, 708.0], [30.7, 709.0], [30.8, 709.0], [30.9, 710.0], [31.0, 711.0], [31.1, 712.0], [31.2, 713.0], [31.3, 714.0], [31.4, 715.0], [31.5, 716.0], [31.6, 716.0], [31.7, 717.0], [31.8, 718.0], [31.9, 719.0], [32.0, 720.0], [32.1, 720.0], [32.2, 721.0], [32.3, 722.0], [32.4, 723.0], [32.5, 723.0], [32.6, 724.0], [32.7, 725.0], [32.8, 727.0], [32.9, 727.0], [33.0, 728.0], [33.1, 729.0], [33.2, 729.0], [33.3, 730.0], [33.4, 731.0], [33.5, 732.0], [33.6, 733.0], [33.7, 733.0], [33.8, 734.0], [33.9, 735.0], [34.0, 736.0], [34.1, 736.0], [34.2, 737.0], [34.3, 738.0], [34.4, 739.0], [34.5, 740.0], [34.6, 741.0], [34.7, 742.0], [34.8, 743.0], [34.9, 744.0], [35.0, 745.0], [35.1, 746.0], [35.2, 747.0], [35.3, 747.0], [35.4, 748.0], [35.5, 749.0], [35.6, 749.0], [35.7, 750.0], [35.8, 751.0], [35.9, 751.0], [36.0, 752.0], [36.1, 753.0], [36.2, 753.0], [36.3, 754.0], [36.4, 755.0], [36.5, 756.0], [36.6, 757.0], [36.7, 758.0], [36.8, 758.0], [36.9, 759.0], [37.0, 760.0], [37.1, 760.0], [37.2, 761.0], [37.3, 762.0], [37.4, 762.0], [37.5, 763.0], [37.6, 764.0], [37.7, 764.0], [37.8, 765.0], [37.9, 766.0], [38.0, 767.0], [38.1, 768.0], [38.2, 769.0], [38.3, 769.0], [38.4, 770.0], [38.5, 771.0], [38.6, 771.0], [38.7, 772.0], [38.8, 772.0], [38.9, 773.0], [39.0, 774.0], [39.1, 774.0], [39.2, 775.0], [39.3, 776.0], [39.4, 776.0], [39.5, 776.0], [39.6, 777.0], [39.7, 777.0], [39.8, 778.0], [39.9, 779.0], [40.0, 780.0], [40.1, 781.0], [40.2, 782.0], [40.3, 782.0], [40.4, 783.0], [40.5, 784.0], [40.6, 785.0], [40.7, 786.0], [40.8, 786.0], [40.9, 787.0], [41.0, 787.0], [41.1, 788.0], [41.2, 789.0], [41.3, 789.0], [41.4, 790.0], [41.5, 791.0], [41.6, 792.0], [41.7, 793.0], [41.8, 793.0], [41.9, 794.0], [42.0, 794.0], [42.1, 795.0], [42.2, 796.0], [42.3, 796.0], [42.4, 797.0], [42.5, 797.0], [42.6, 798.0], [42.7, 798.0], [42.8, 799.0], [42.9, 800.0], [43.0, 801.0], [43.1, 801.0], [43.2, 802.0], [43.3, 803.0], [43.4, 803.0], [43.5, 804.0], [43.6, 804.0], [43.7, 805.0], [43.8, 805.0], [43.9, 806.0], [44.0, 807.0], [44.1, 808.0], [44.2, 808.0], [44.3, 809.0], [44.4, 809.0], [44.5, 810.0], [44.6, 812.0], [44.7, 812.0], [44.8, 813.0], [44.9, 814.0], [45.0, 815.0], [45.1, 815.0], [45.2, 816.0], [45.3, 817.0], [45.4, 817.0], [45.5, 818.0], [45.6, 819.0], [45.7, 820.0], [45.8, 820.0], [45.9, 821.0], [46.0, 821.0], [46.1, 822.0], [46.2, 823.0], [46.3, 823.0], [46.4, 824.0], [46.5, 824.0], [46.6, 825.0], [46.7, 826.0], [46.8, 826.0], [46.9, 827.0], [47.0, 828.0], [47.1, 828.0], [47.2, 829.0], [47.3, 830.0], [47.4, 831.0], [47.5, 831.0], [47.6, 833.0], [47.7, 833.0], [47.8, 833.0], [47.9, 834.0], [48.0, 835.0], [48.1, 836.0], [48.2, 836.0], [48.3, 837.0], [48.4, 837.0], [48.5, 838.0], [48.6, 839.0], [48.7, 840.0], [48.8, 840.0], [48.9, 841.0], [49.0, 842.0], [49.1, 843.0], [49.2, 844.0], [49.3, 844.0], [49.4, 845.0], [49.5, 846.0], [49.6, 846.0], [49.7, 847.0], [49.8, 847.0], [49.9, 848.0], [50.0, 848.0], [50.1, 849.0], [50.2, 850.0], [50.3, 851.0], [50.4, 852.0], [50.5, 852.0], [50.6, 853.0], [50.7, 854.0], [50.8, 854.0], [50.9, 855.0], [51.0, 856.0], [51.1, 856.0], [51.2, 858.0], [51.3, 858.0], [51.4, 860.0], [51.5, 860.0], [51.6, 861.0], [51.7, 861.0], [51.8, 862.0], [51.9, 863.0], [52.0, 864.0], [52.1, 865.0], [52.2, 866.0], [52.3, 867.0], [52.4, 867.0], [52.5, 868.0], [52.6, 869.0], [52.7, 869.0], [52.8, 870.0], [52.9, 871.0], [53.0, 871.0], [53.1, 872.0], [53.2, 873.0], [53.3, 874.0], [53.4, 875.0], [53.5, 875.0], [53.6, 876.0], [53.7, 877.0], [53.8, 878.0], [53.9, 878.0], [54.0, 879.0], [54.1, 880.0], [54.2, 880.0], [54.3, 881.0], [54.4, 881.0], [54.5, 882.0], [54.6, 882.0], [54.7, 883.0], [54.8, 883.0], [54.9, 884.0], [55.0, 885.0], [55.1, 886.0], [55.2, 886.0], [55.3, 887.0], [55.4, 888.0], [55.5, 889.0], [55.6, 890.0], [55.7, 891.0], [55.8, 891.0], [55.9, 892.0], [56.0, 892.0], [56.1, 893.0], [56.2, 894.0], [56.3, 895.0], [56.4, 895.0], [56.5, 896.0], [56.6, 897.0], [56.7, 898.0], [56.8, 899.0], [56.9, 900.0], [57.0, 901.0], [57.1, 902.0], [57.2, 903.0], [57.3, 903.0], [57.4, 904.0], [57.5, 905.0], [57.6, 906.0], [57.7, 907.0], [57.8, 908.0], [57.9, 909.0], [58.0, 909.0], [58.1, 910.0], [58.2, 911.0], [58.3, 912.0], [58.4, 912.0], [58.5, 913.0], [58.6, 914.0], [58.7, 915.0], [58.8, 915.0], [58.9, 916.0], [59.0, 917.0], [59.1, 917.0], [59.2, 918.0], [59.3, 919.0], [59.4, 919.0], [59.5, 920.0], [59.6, 921.0], [59.7, 921.0], [59.8, 922.0], [59.9, 923.0], [60.0, 923.0], [60.1, 924.0], [60.2, 925.0], [60.3, 925.0], [60.4, 926.0], [60.5, 926.0], [60.6, 927.0], [60.7, 928.0], [60.8, 929.0], [60.9, 929.0], [61.0, 930.0], [61.1, 931.0], [61.2, 931.0], [61.3, 933.0], [61.4, 933.0], [61.5, 934.0], [61.6, 935.0], [61.7, 935.0], [61.8, 937.0], [61.9, 937.0], [62.0, 938.0], [62.1, 939.0], [62.2, 939.0], [62.3, 940.0], [62.4, 941.0], [62.5, 942.0], [62.6, 942.0], [62.7, 943.0], [62.8, 944.0], [62.9, 945.0], [63.0, 945.0], [63.1, 946.0], [63.2, 947.0], [63.3, 947.0], [63.4, 948.0], [63.5, 949.0], [63.6, 949.0], [63.7, 950.0], [63.8, 951.0], [63.9, 951.0], [64.0, 952.0], [64.1, 953.0], [64.2, 954.0], [64.3, 955.0], [64.4, 956.0], [64.5, 957.0], [64.6, 958.0], [64.7, 959.0], [64.8, 959.0], [64.9, 960.0], [65.0, 961.0], [65.1, 961.0], [65.2, 962.0], [65.3, 963.0], [65.4, 964.0], [65.5, 965.0], [65.6, 966.0], [65.7, 967.0], [65.8, 967.0], [65.9, 968.0], [66.0, 968.0], [66.1, 970.0], [66.2, 970.0], [66.3, 971.0], [66.4, 972.0], [66.5, 973.0], [66.6, 974.0], [66.7, 974.0], [66.8, 975.0], [66.9, 976.0], [67.0, 977.0], [67.1, 977.0], [67.2, 979.0], [67.3, 980.0], [67.4, 981.0], [67.5, 981.0], [67.6, 983.0], [67.7, 984.0], [67.8, 985.0], [67.9, 986.0], [68.0, 987.0], [68.1, 987.0], [68.2, 988.0], [68.3, 989.0], [68.4, 989.0], [68.5, 991.0], [68.6, 992.0], [68.7, 993.0], [68.8, 994.0], [68.9, 994.0], [69.0, 995.0], [69.1, 996.0], [69.2, 996.0], [69.3, 997.0], [69.4, 998.0], [69.5, 999.0], [69.6, 1001.0], [69.7, 1002.0], [69.8, 1003.0], [69.9, 1003.0], [70.0, 1004.0], [70.1, 1005.0], [70.2, 1006.0], [70.3, 1007.0], [70.4, 1007.0], [70.5, 1008.0], [70.6, 1009.0], [70.7, 1010.0], [70.8, 1011.0], [70.9, 1012.0], [71.0, 1012.0], [71.1, 1013.0], [71.2, 1014.0], [71.3, 1016.0], [71.4, 1017.0], [71.5, 1017.0], [71.6, 1018.0], [71.7, 1019.0], [71.8, 1020.0], [71.9, 1021.0], [72.0, 1022.0], [72.1, 1024.0], [72.2, 1025.0], [72.3, 1026.0], [72.4, 1027.0], [72.5, 1028.0], [72.6, 1029.0], [72.7, 1031.0], [72.8, 1031.0], [72.9, 1033.0], [73.0, 1033.0], [73.1, 1034.0], [73.2, 1036.0], [73.3, 1036.0], [73.4, 1037.0], [73.5, 1038.0], [73.6, 1039.0], [73.7, 1040.0], [73.8, 1041.0], [73.9, 1042.0], [74.0, 1043.0], [74.1, 1044.0], [74.2, 1045.0], [74.3, 1046.0], [74.4, 1047.0], [74.5, 1048.0], [74.6, 1049.0], [74.7, 1050.0], [74.8, 1051.0], [74.9, 1054.0], [75.0, 1054.0], [75.1, 1057.0], [75.2, 1057.0], [75.3, 1058.0], [75.4, 1060.0], [75.5, 1061.0], [75.6, 1063.0], [75.7, 1064.0], [75.8, 1065.0], [75.9, 1066.0], [76.0, 1067.0], [76.1, 1068.0], [76.2, 1069.0], [76.3, 1071.0], [76.4, 1072.0], [76.5, 1073.0], [76.6, 1074.0], [76.7, 1074.0], [76.8, 1076.0], [76.9, 1077.0], [77.0, 1079.0], [77.1, 1080.0], [77.2, 1081.0], [77.3, 1083.0], [77.4, 1084.0], [77.5, 1086.0], [77.6, 1087.0], [77.7, 1088.0], [77.8, 1089.0], [77.9, 1090.0], [78.0, 1092.0], [78.1, 1093.0], [78.2, 1093.0], [78.3, 1095.0], [78.4, 1096.0], [78.5, 1098.0], [78.6, 1100.0], [78.7, 1101.0], [78.8, 1103.0], [78.9, 1104.0], [79.0, 1106.0], [79.1, 1107.0], [79.2, 1109.0], [79.3, 1110.0], [79.4, 1110.0], [79.5, 1112.0], [79.6, 1114.0], [79.7, 1115.0], [79.8, 1117.0], [79.9, 1119.0], [80.0, 1120.0], [80.1, 1121.0], [80.2, 1123.0], [80.3, 1125.0], [80.4, 1126.0], [80.5, 1127.0], [80.6, 1128.0], [80.7, 1130.0], [80.8, 1131.0], [80.9, 1133.0], [81.0, 1134.0], [81.1, 1136.0], [81.2, 1138.0], [81.3, 1140.0], [81.4, 1141.0], [81.5, 1143.0], [81.6, 1144.0], [81.7, 1146.0], [81.8, 1148.0], [81.9, 1150.0], [82.0, 1151.0], [82.1, 1152.0], [82.2, 1153.0], [82.3, 1154.0], [82.4, 1156.0], [82.5, 1157.0], [82.6, 1159.0], [82.7, 1162.0], [82.8, 1164.0], [82.9, 1165.0], [83.0, 1167.0], [83.1, 1169.0], [83.2, 1173.0], [83.3, 1174.0], [83.4, 1175.0], [83.5, 1176.0], [83.6, 1179.0], [83.7, 1181.0], [83.8, 1183.0], [83.9, 1184.0], [84.0, 1186.0], [84.1, 1187.0], [84.2, 1189.0], [84.3, 1190.0], [84.4, 1193.0], [84.5, 1194.0], [84.6, 1196.0], [84.7, 1199.0], [84.8, 1200.0], [84.9, 1202.0], [85.0, 1204.0], [85.1, 1206.0], [85.2, 1208.0], [85.3, 1210.0], [85.4, 1213.0], [85.5, 1215.0], [85.6, 1217.0], [85.7, 1220.0], [85.8, 1221.0], [85.9, 1223.0], [86.0, 1225.0], [86.1, 1227.0], [86.2, 1230.0], [86.3, 1232.0], [86.4, 1235.0], [86.5, 1237.0], [86.6, 1239.0], [86.7, 1241.0], [86.8, 1243.0], [86.9, 1245.0], [87.0, 1249.0], [87.1, 1252.0], [87.2, 1254.0], [87.3, 1257.0], [87.4, 1259.0], [87.5, 1261.0], [87.6, 1264.0], [87.7, 1267.0], [87.8, 1269.0], [87.9, 1271.0], [88.0, 1272.0], [88.1, 1274.0], [88.2, 1277.0], [88.3, 1278.0], [88.4, 1283.0], [88.5, 1285.0], [88.6, 1288.0], [88.7, 1291.0], [88.8, 1293.0], [88.9, 1295.0], [89.0, 1296.0], [89.1, 1299.0], [89.2, 1302.0], [89.3, 1304.0], [89.4, 1307.0], [89.5, 1310.0], [89.6, 1314.0], [89.7, 1318.0], [89.8, 1320.0], [89.9, 1322.0], [90.0, 1325.0], [90.1, 1327.0], [90.2, 1329.0], [90.3, 1332.0], [90.4, 1334.0], [90.5, 1336.0], [90.6, 1339.0], [90.7, 1344.0], [90.8, 1347.0], [90.9, 1352.0], [91.0, 1357.0], [91.1, 1363.0], [91.2, 1366.0], [91.3, 1369.0], [91.4, 1375.0], [91.5, 1378.0], [91.6, 1380.0], [91.7, 1383.0], [91.8, 1387.0], [91.9, 1390.0], [92.0, 1392.0], [92.1, 1396.0], [92.2, 1398.0], [92.3, 1402.0], [92.4, 1406.0], [92.5, 1411.0], [92.6, 1415.0], [92.7, 1417.0], [92.8, 1423.0], [92.9, 1425.0], [93.0, 1429.0], [93.1, 1437.0], [93.2, 1441.0], [93.3, 1448.0], [93.4, 1453.0], [93.5, 1459.0], [93.6, 1465.0], [93.7, 1473.0], [93.8, 1482.0], [93.9, 1488.0], [94.0, 1494.0], [94.1, 1499.0], [94.2, 1507.0], [94.3, 1512.0], [94.4, 1517.0], [94.5, 1523.0], [94.6, 1526.0], [94.7, 1530.0], [94.8, 1538.0], [94.9, 1543.0], [95.0, 1550.0], [95.1, 1556.0], [95.2, 1563.0], [95.3, 1569.0], [95.4, 1577.0], [95.5, 1586.0], [95.6, 1598.0], [95.7, 1606.0], [95.8, 1619.0], [95.9, 1630.0], [96.0, 1640.0], [96.1, 1655.0], [96.2, 1668.0], [96.3, 1676.0], [96.4, 1688.0], [96.5, 1704.0], [96.6, 1713.0], [96.7, 1733.0], [96.8, 1743.0], [96.9, 1771.0], [97.0, 1794.0], [97.1, 1814.0], [97.2, 1832.0], [97.3, 1847.0], [97.4, 1865.0], [97.5, 1883.0], [97.6, 1912.0], [97.7, 1939.0], [97.8, 1961.0], [97.9, 1989.0], [98.0, 2013.0], [98.1, 2041.0], [98.2, 2072.0], [98.3, 2090.0], [98.4, 2106.0], [98.5, 2131.0], [98.6, 2151.0], [98.7, 2168.0], [98.8, 2185.0], [98.9, 2223.0], [99.0, 2247.0], [99.1, 2265.0], [99.2, 2276.0], [99.3, 2297.0], [99.4, 2316.0], [99.5, 2349.0], [99.6, 2395.0], [99.7, 2496.0], [99.8, 2587.0], [99.9, 2856.0], [100.0, 14084.0]], "isOverall": false, "label": "GetRandomPhrase", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 1396.0, "series": [{"data": [[0.0, 86.0], [2300.0, 1.0], [300.0, 1.0], [1300.0, 1.0], [1400.0, 1.0], [100.0, 3.0], [1600.0, 1.0], [1700.0, 2.0], [1900.0, 2.0], [500.0, 1.0], [1000.0, 1.0]], "isOverall": false, "label": "Step1. Login", "isController": false}, {"data": [[0.0, 214.0], [9100.0, 1.0], [600.0, 847.0], [9600.0, 1.0], [10500.0, 1.0], [700.0, 1325.0], [11200.0, 1.0], [12400.0, 2.0], [800.0, 1396.0], [14000.0, 1.0], [900.0, 1267.0], [1000.0, 905.0], [1100.0, 616.0], [1200.0, 441.0], [1300.0, 308.0], [1400.0, 189.0], [1500.0, 150.0], [100.0, 380.0], [1600.0, 86.0], [1700.0, 54.0], [1800.0, 53.0], [1900.0, 39.0], [2000.0, 41.0], [2100.0, 47.0], [2200.0, 49.0], [2300.0, 31.0], [2400.0, 8.0], [2500.0, 10.0], [2600.0, 7.0], [2800.0, 3.0], [2700.0, 1.0], [200.0, 240.0], [300.0, 320.0], [5500.0, 1.0], [5400.0, 1.0], [400.0, 447.0], [500.0, 517.0]], "isOverall": false, "label": "GetRandomPhrase", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 14000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 592.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 7816.0, "series": [{"data": [[0.0, 1692.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 7816.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 592.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 11.86341463414634, "minX": 1.59655848E12, "maxY": 90.38456001439646, "series": [{"data": [[1.5965586E12, 11.86341463414634], [1.59655848E12, 87.14061779621967], [1.59655854E12, 90.38456001439646]], "isOverall": false, "label": "Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5965586E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 14.0, "minX": 1.0, "maxY": 1536.25, "series": [{"data": [[3.0, 101.33333333333333], [4.0, 16.0], [5.0, 86.0], [6.0, 17.0], [7.0, 23.0], [8.0, 16.0], [9.0, 14.0], [11.0, 19.0], [12.0, 20.0], [13.0, 182.5], [14.0, 19.0], [15.0, 29.0], [16.0, 27.0], [18.0, 20.0], [19.0, 22.0], [20.0, 21.0], [21.0, 25.0], [22.0, 279.5], [23.0, 28.0], [24.0, 19.0], [25.0, 33.0], [26.0, 15.0], [27.0, 21.0], [28.0, 27.0], [29.0, 25.0], [30.0, 38.0], [31.0, 28.0], [32.0, 30.0], [33.0, 36.0], [34.0, 29.0], [35.0, 44.0], [36.0, 32.0], [37.0, 36.0], [38.0, 31.0], [39.0, 33.0], [41.0, 27.0], [42.0, 46.0], [43.0, 38.0], [45.0, 39.0], [46.0, 31.0], [47.0, 33.0], [48.0, 44.0], [49.0, 28.0], [50.0, 44.0], [51.0, 47.0], [52.0, 33.0], [53.0, 676.5], [54.0, 1070.0], [55.0, 38.0], [56.0, 53.0], [57.0, 41.0], [58.0, 55.0], [60.0, 53.0], [61.0, 47.0], [62.0, 55.0], [63.0, 55.0], [64.0, 69.0], [65.0, 46.0], [66.0, 44.0], [67.0, 39.0], [68.0, 1459.0], [69.0, 61.0], [71.0, 60.0], [72.0, 57.0], [73.0, 61.0], [74.0, 59.0], [75.0, 56.0], [76.0, 55.0], [77.0, 41.0], [78.0, 1017.0], [79.0, 63.0], [81.0, 53.0], [82.0, 45.0], [83.0, 69.0], [84.0, 839.5], [85.0, 65.0], [86.0, 82.0], [87.0, 914.0], [88.0, 85.0], [89.0, 72.0], [90.0, 76.0], [91.0, 69.0], [94.0, 87.0], [95.0, 78.0], [96.0, 77.0], [98.0, 62.0], [99.0, 74.0], [100.0, 1536.25]], "isOverall": false, "label": "Step1. Login", "isController": false}, {"data": [[51.819999999999986, 202.74]], "isOverall": false, "label": "Step1. Login-Aggregated", "isController": false}, {"data": [[2.0, 22.0], [3.0, 36.666666666666664], [4.0, 63.75000000000001], [5.0, 48.5], [6.0, 46.88235294117647], [7.0, 42.833333333333336], [8.0, 74.84615384615384], [9.0, 70.78571428571428], [10.0, 114.76470588235294], [11.0, 109.2], [12.0, 94.61538461538461], [13.0, 139.95238095238093], [14.0, 106.63636363636363], [15.0, 113.64705882352942], [16.0, 81.86666666666666], [17.0, 227.41666666666669], [18.0, 122.33333333333331], [19.0, 424.45], [20.0, 92.0], [21.0, 194.6428571428571], [22.0, 136.42857142857144], [23.0, 289.6875], [24.0, 120.875], [25.0, 234.875], [26.0, 153.9], [27.0, 313.875], [28.0, 144.76923076923077], [29.0, 248.06666666666666], [30.0, 255.52380952380955], [31.0, 221.25], [32.0, 340.2083333333333], [33.0, 230.61538461538464], [34.0, 338.20000000000005], [35.0, 460.39534883720927], [36.0, 331.5625], [37.0, 343.0], [38.0, 283.3333333333333], [39.0, 390.41463414634137], [40.0, 413.8695652173913], [41.0, 394.15000000000003], [42.0, 435.8421052631579], [43.0, 359.2380952380952], [44.0, 338.3499999999999], [45.0, 459.1875], [46.0, 333.0769230769231], [47.0, 406.42857142857144], [48.0, 454.8333333333333], [49.0, 258.44444444444446], [50.0, 341.2857142857143], [51.0, 483.40000000000003], [52.0, 433.6153846153845], [53.0, 445.95000000000005], [54.0, 460.64285714285717], [55.0, 370.16666666666663], [56.0, 643.4999999999999], [57.0, 490.3], [58.0, 518.4324324324328], [59.0, 510.4705882352941], [60.0, 564.2857142857143], [61.0, 437.31818181818187], [62.0, 478.93333333333334], [63.0, 558.9428571428571], [64.0, 586.2439024390244], [65.0, 446.34999999999997], [66.0, 728.3636363636364], [67.0, 942.8571428571429], [68.0, 528.9444444444445], [69.0, 674.8888888888889], [70.0, 708.4444444444445], [71.0, 486.80952380952374], [72.0, 408.55555555555554], [73.0, 698.2222222222222], [74.0, 618.0303030303029], [75.0, 659.0000000000001], [76.0, 700.1666666666667], [77.0, 773.2857142857142], [78.0, 728.1646586345382], [79.0, 784.1555555555555], [80.0, 667.128205128205], [81.0, 774.1428571428572], [82.0, 732.1923076923076], [83.0, 577.35], [84.0, 818.7209302325581], [85.0, 745.5373134328356], [86.0, 857.8354430379746], [87.0, 1019.6153846153846], [88.0, 908.4640000000002], [89.0, 806.7894736842105], [90.0, 903.6606334841631], [91.0, 932.0509554140128], [92.0, 651.8333333333334], [93.0, 1183.4330985915487], [94.0, 999.7679999999999], [95.0, 888.3043478260869], [96.0, 1043.866141732284], [97.0, 1001.6175115207379], [98.0, 990.9515050167223], [99.0, 905.3636363636361], [100.0, 974.6821797931586], [1.0, 170.30769230769226]], "isOverall": false, "label": "GetRandomPhrase", "isController": false}, {"data": [[87.7533, 873.6844000000021]], "isOverall": false, "label": "GetRandomPhrase-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1417.9166666666667, "minX": 1.59655848E12, "maxY": 317584.98333333334, "series": [{"data": [[1.5965586E12, 12320.466666666667], [1.59655848E12, 239250.86666666667], [1.59655854E12, 317584.98333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.5965586E12, 1417.9166666666667], [1.59655848E12, 29848.516666666666], [1.59655854E12, 38435.916666666664]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5965586E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 202.74, "minX": 1.59655848E12, "maxY": 991.5252834263091, "series": [{"data": [[1.59655848E12, 202.74]], "isOverall": false, "label": "Step1. Login", "isController": false}, {"data": [[1.5965586E12, 258.160975609756], [1.59655848E12, 748.9417177914115], [1.59655854E12, 991.5252834263091]], "isOverall": false, "label": "GetRandomPhrase", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5965586E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 202.67000000000002, "minX": 1.59655848E12, "maxY": 991.5135864675171, "series": [{"data": [[1.59655848E12, 202.67000000000002]], "isOverall": false, "label": "Step1. Login", "isController": false}, {"data": [[1.5965586E12, 258.151219512195], [1.59655848E12, 748.9209532798483], [1.59655854E12, 991.5135864675171]], "isOverall": false, "label": "GetRandomPhrase", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5965586E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.59655848E12, "maxY": 1.1900000000000002, "series": [{"data": [[1.59655848E12, 1.1900000000000002]], "isOverall": false, "label": "Step1. Login", "isController": false}, {"data": [[1.5965586E12, 0.0], [1.59655848E12, 0.0], [1.59655854E12, 0.011876912002879285]], "isOverall": false, "label": "GetRandomPhrase", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5965586E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 14.0, "minX": 1.59655848E12, "maxY": 14084.0, "series": [{"data": [[1.5965586E12, 5494.0], [1.59655848E12, 9600.0], [1.59655854E12, 14084.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.5965586E12, 22.0], [1.59655848E12, 27.0], [1.59655854E12, 373.02199867486956]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.5965586E12, 22.0], [1.59655848E12, 27.0], [1.59655854E12, 377.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.5965586E12, 22.0], [1.59655848E12, 27.0], [1.59655854E12, 374.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.5965586E12, 22.0], [1.59655848E12, 14.0], [1.59655854E12, 206.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.5965586E12, 170.0], [1.59655848E12, 747.0], [1.59655854E12, 945.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5965586E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 29.5, "minX": 2.0, "maxY": 2088.0, "series": [{"data": [[2.0, 161.0], [5.0, 168.0], [6.0, 162.0], [7.0, 160.0], [23.0, 154.0], [28.0, 29.5], [35.0, 2088.0], [53.0, 1101.0], [62.0, 1402.0], [64.0, 1249.5], [66.0, 1127.5], [65.0, 1429.0], [67.0, 1277.0], [68.0, 1427.5], [71.0, 1497.0], [73.0, 1386.0], [78.0, 1144.5], [81.0, 426.0], [86.0, 1088.0], [85.0, 1295.0], [91.0, 926.0], [89.0, 1273.0], [90.0, 943.0], [88.0, 1018.0], [95.0, 859.0], [93.0, 997.0], [94.0, 1052.5], [92.0, 987.0], [98.0, 857.5], [99.0, 905.0], [96.0, 876.0], [97.0, 905.0], [102.0, 935.5], [100.0, 944.5], [101.0, 960.0], [103.0, 568.0], [104.0, 759.5], [107.0, 961.0], [106.0, 455.5], [111.0, 735.5], [109.0, 755.0], [110.0, 683.0], [108.0, 767.5], [114.0, 811.0], [113.0, 806.0], [115.0, 796.0], [112.0, 826.5], [117.0, 316.0], [116.0, 694.0], [123.0, 682.5], [122.0, 175.5], [121.0, 697.0], [120.0, 848.0], [124.0, 89.5], [127.0, 219.0], [126.0, 796.0], [125.0, 834.0], [131.0, 805.0], [140.0, 759.0], [141.0, 809.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 141.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 29.5, "minX": 2.0, "maxY": 2088.0, "series": [{"data": [[2.0, 161.0], [5.0, 168.0], [6.0, 162.0], [7.0, 160.0], [23.0, 154.0], [28.0, 29.5], [35.0, 2088.0], [53.0, 1101.0], [62.0, 1402.0], [64.0, 1249.5], [66.0, 1127.0], [65.0, 1429.0], [67.0, 1277.0], [68.0, 1427.5], [71.0, 1497.0], [73.0, 1386.0], [78.0, 1144.5], [81.0, 426.0], [86.0, 1088.0], [85.0, 1295.0], [91.0, 926.0], [89.0, 1273.0], [90.0, 943.0], [88.0, 1018.0], [95.0, 859.0], [93.0, 997.0], [94.0, 1052.5], [92.0, 987.0], [98.0, 857.5], [99.0, 905.0], [96.0, 876.0], [97.0, 905.0], [102.0, 935.5], [100.0, 944.5], [101.0, 960.0], [103.0, 568.0], [104.0, 759.5], [107.0, 961.0], [106.0, 455.5], [111.0, 735.5], [109.0, 755.0], [110.0, 683.0], [108.0, 767.5], [114.0, 811.0], [113.0, 806.0], [115.0, 796.0], [112.0, 826.0], [117.0, 316.0], [116.0, 694.0], [123.0, 682.5], [122.0, 175.5], [121.0, 697.0], [120.0, 848.0], [124.0, 89.5], [127.0, 219.0], [126.0, 796.0], [125.0, 834.0], [131.0, 805.0], [140.0, 759.0], [141.0, 809.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 141.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 2.85, "minX": 1.59655848E12, "maxY": 91.51666666666667, "series": [{"data": [[1.5965586E12, 2.85], [1.59655848E12, 73.96666666666667], [1.59655854E12, 91.51666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5965586E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 3.4166666666666665, "minX": 1.59655848E12, "maxY": 92.61666666666666, "series": [{"data": [[1.5965586E12, 3.4166666666666665], [1.59655848E12, 72.3], [1.59655854E12, 92.61666666666666]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5965586E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.6666666666666667, "minX": 1.59655848E12, "maxY": 92.61666666666666, "series": [{"data": [[1.59655848E12, 1.6666666666666667]], "isOverall": false, "label": "Step1. Login-success", "isController": false}, {"data": [[1.5965586E12, 3.4166666666666665], [1.59655848E12, 70.63333333333334], [1.59655854E12, 92.61666666666666]], "isOverall": false, "label": "GetRandomPhrase-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5965586E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 3.4166666666666665, "minX": 1.59655848E12, "maxY": 92.61666666666666, "series": [{"data": [[1.5965586E12, 3.4166666666666665], [1.59655848E12, 72.3], [1.59655854E12, 92.61666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5965586E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

